{
    "title": "What should I learn after React? - Quora",
    "tags": [
        "React (JavaScript library)"
    ],
    "response": [
        {
            "author_info": {
                "name": "Robin Wieruch",
                "href": "/profile/Robin-Wieruch"
            },
            "answer_text": "State Management: You have used React this.setState() and this.state to manage and access local component state. That\u2019s a perfect start. However, in a larger application you will experience the limits of React\u2019s local component state. Therefore you can use a third-party state management library such as Redux or MobX. On the course platform Road to React, you will find the course Taming the State in React that teaches advanced local state in React, Redux and MobX. The course comes with an ebook as well, but I recommend everyone to dive into the source code and screencasts too.Connecting to a Database and/or Authentication: In a growing React application, you may want to persist data eventually. The data should be stored in a database so that it can survive after a browser session and be shared across different users using your application. The simplest way to introduce a database is using Firebase. In this comprehensive tutorial, you will find a step by step guide on how to use Firebase authentication (sign up, sign in, sign out, \u2026) in React. Beyond that, you will use Firebase\u2019s realtime database to store user entities. After that, it\u2019s up to you to store more data in the database which is needed by your application.Tooling with Webpack and Babel: You may have used only create-react-app to set up your application. At some point, when you have learned React, you might want to learn the tooling around it. It enables you to setup your own project without create-react-app. I can recommend to follow a minimal setup with Webpack and Babel. Afterward, you can apply more tooling on your own. For instance, you could use ESLint to follow a unified code style in your application.React Component Syntax: The possibilities and best practices to implement React components evolve over time. You will find many ways to write your React components, especially React class components, in other learning resources. You can checkout this GitHub repository to find out about an alternative way to write React class components. By using the class field declarations, you can write them even more concise in the future.Other Projects: After learning plain React, it is always good to apply the learnings first in your own projects before learning something new. You could write your own tic-tac-toe game or a simple calculator in React. There are plenty of tutorials out there that use only React to build something exciting. Check out mine about building a paginated and infinite scrolling list, showcasing tweets on a Twitter wall or connecting your React application to Stripe for charging money. Experiment with these mini applications to get comfortable in React.UI Components: You shouldn\u2019t make the mistake to introduce too early a UI component library in your project. First, you should learn how to implement and use a dropdown, checkbox or dialog in React with standard HTML elements from scratch. The major part of these components will manage their own local state. A checkbox has to know whether it is checked or not checked. Thus you should implement them as controlled components. After you went through all the foundational implementations, you can introduce a UI component library which gives you checkboxes and dialogs as React components.Testing: If you are not familiar with the general topic, you could dive deeper into the concepts of unit testing and integration testing, especially in context of React applications. On an implementation level, I would recommend to stick to Enzyme and Jest in order to refine your approach of testing with unit tests and snapshot tests in React.Routing: You can implement routing for your application with react-router. React Router helps you to have multiple pages across multiple URLs. When you introduce routing to your application, you don\u2019t make any requests to your web server to request the next page. The router will do everything for you on the client-side. So get your hands dirty and introduce routing in your application.Type Checking: You can introduce static type checking on compile time. TypeScript is one popular approach. But in the React ecosystem, people often use Flow. I can recommend to give Flow a shot, if you are interested to make your application more robust.React Native: React Native brings your application on mobile devices. You can apply your learnings from React to ship iOS and Android applications. The learning curve, once you have learned React, shouldn\u2019t be steep in React Native. Both share the same principles. You will only encounter different layout components on mobile than you are used to in web applications.",
            "date": "Answered May 30, 2018",
            "views": "45",
            "upvotes": " View 20 Upvoters",
            "upvoters": [
                {
                    "user_id": "Richard Joel",
                    "user_href": "/profile/Richard-Joel-18"
                },
                {
                    "user_id": "Manuel Abascal",
                    "user_href": "/profile/Manuel-Abascal-2"
                },
                {
                    "user_id": "Sourabh",
                    "user_href": "/profile/Sourabh-176"
                },
                {
                    "user_id": "Nguy\u1ec5n Trung Th\u00f4ng",
                    "user_href": "/profile/Nguy\u1ec5n-Trung-Th\u00f4ng"
                },
                {
                    "user_id": "Mert Ciflikli",
                    "user_href": "/profile/Mert-Ciflikli"
                },
                {
                    "user_id": "Harsh Vats",
                    "user_href": "/profile/Harsh-Vats-22"
                },
                {
                    "user_id": "Prince Verma",
                    "user_href": "/profile/Prince-Verma-383"
                },
                {
                    "user_id": "AJIBADE HAMMED",
                    "user_href": "/profile/AJIBADE-HAMMED"
                },
                {
                    "user_id": "Shivam Pandey",
                    "user_href": "/profile/Shivam-Pandey-77"
                },
                {
                    "user_id": "ISHAN AJMERI",
                    "user_href": "/profile/ISHAN-AJMERI-1"
                }
            ]
        },
        {
            "author_info": {
                "name": "James H. Kelly",
                "href": "/profile/James-H-Kelly"
            },
            "answer_text": "Do you find that you need to know algorithms when writing your front-end code? It seems unlikely to me. The best way to figure out \u201cwhat should I learn next\u201d is usually to decide what you want to make. Use the blockers you encounter during developing a project to determine what you need to learn. ",
            "date": "Answered June 6, 2017",
            "views": "14",
            "upvotes": " View 4 Upvoters",
            "upvoters": [
                {
                    "user_id": "Vamsikrishna Chiguruwada",
                    "user_href": "/profile/Vamsikrishna-Chiguruwada"
                },
                {
                    "user_id": "Vardan Kaushik",
                    "user_href": "/profile/Vardan-Kaushik-2"
                },
                {
                    "user_id": "Alankar Anand",
                    "user_href": "/profile/Alankar-Anand"
                },
                {
                    "user_id": "Luke Fabish",
                    "user_href": "/profile/Luke-Fabish-1"
                }
            ]
        }
    ]
}