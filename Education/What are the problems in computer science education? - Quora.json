{
    "title": "What are the problems in computer science education? - Quora",
    "tags": [
        "Problems",
        "Computer Science Education",
        "Computer Science"
    ],
    "response": [
        {
            "author_info": {
                "name": "Nathan Tesker",
                "href": "/profile/Nathan-Tesker"
            },
            "answer_text": "I am going to be speaking from my own personal experience. I was a hobbyist programmer since I was 13 years old and came into university well-prepared. However, most of my classmates had no prior programming experience and had a terrible time. I recognize that some of what I have to say may depend on the individual schools and professors but it seems like they are widespread. Here are some of the issues that affected them the most: Terrible Debugging Practices:With the exception of my introductory Java classes, all the programming that we had to do was taught in a Linux environment. Basically open a text file and type. Seeing what was going on inside the program was only possible with copious print statements \u2014 an antiquated and inefficient approach. The professors did not introduce nor mention any IDEs (Integrated Development Environments) or any debuggers, which allow one to pause a program and to walk through it step by step to see how its variables change. The text-file only approach is manageable when making small programs but good luck getting larger projects done. I lucked out since I knew about IDEs and did my C++ homework in my favorite IDE with a C++ debugger and then transferred my work to the Linux text-file environment. Others weren\u2019t as lucky. This wasted their time by a factor of many hours and made students very frustrated. Professors should help students learn how to debug properly and efficiently. Homeworks \u2014 Lack Of An \u201cEase-In\u201d:People learn to program by doing but you can\u2019t learn to run before you walk \u2014 and it takes time to do that. During my time at university, the professors typically gave a small number of large-scale homework assignments. In other words, students weren\u2019t eased into the used programming languages and environments. Imagine me teaching you basic French verb conjugation and asking you to go home and write a fully-functioning Chanson for homework and you might get a sense of how bad it is. If I was teaching with the typical two lectures per week, I would spend the first few weeks giving small-scale homework assignments due by the beginning of the next lecture. These would gradually increase in size and difficulty and ease students into the course. Theory:The education system teaches mostly fluffy theory (which may or may not be outdated) and emphasizes hands-on skills less. In a way this makes sense: the professors often do theoretical research and academia can not keep up with the rapidly-changing industry\u2019s latest trends, revise their curriculums, and teach students the latest practices. In my Information Security Principles class for example, we just memorized stuff like access control models and etc but never set up a secured environment. The classes that require hands-on programming often rush students through concepts and the students are often focused on quickly completing the massive homework they are unprepared for (per my previous bullets) that they forget everything they learn by graduation. There are some opportunities to gain hands-on programming experience but with the exception of the final project, they are often non-required electives. Thus, people with no prior programming experience and few side projects leave the system with some theoretical knowledge (which may or may be remembered or useful) and few practical skills. Terrible. Lack Of Hardware Knowledge:I don\u2019t just blame the university system; this is a problem in the industry as well. Most computer scientists just treat a computer as a dumb box and tell it what to do. What\u2019s inside? They don\u2019t know and couldn\u2019t care less. Since there is a massive shortage of computer scientists and high salaries, they often focus on the latest and sexiest frameworks, languages, and etc \u2014 all with a high level of abstraction. This, combined with the massive oversupply of electrical engineers results in electrical engineers shifting gears to programming embedded systems, hardware, and firmware. They, of course, have less programming experience and worse code quality. The result? Major and stupid vulnerabilities in IoT devices, which are becoming more prevalent by the day.  Coming Soon: Hackers Entering Your Network Via A Vulnerable IoT Device And Stealing Your Financial Information. Welcome To The Future! This is ridiculously bad. One required course on logic gates for computer science majors does not cut it. Courses on embedded systems and the like should be required. Cookie Cutter ProblemsThis is also true for the education system in many other fields. Some classes have become more about acing the test than about learning. In the classes leading up to tests in my operating systems class, we were told the exact types of problems that we had to solve. We had to solve them on the test again, with some mild changes in numbers. This resulted in students having perfect grades but being unable to explain on a high level how an operating system works. We wasted a semester on this garbage. Perfect. ",
            "date": "Answered February 2, 2020",
            "views": "11",
            "upvotes": " View 4 Upvoters",
            "upvoters": [
                {
                    "user_id": "Sriram Srinivasan",
                    "user_href": "/profile/Sriram-Srinivasan-204"
                },
                {
                    "user_id": "Solomon Malekani",
                    "user_href": "/profile/Solomon-Malekani"
                },
                {
                    "user_id": "Sumedh Khanolkar",
                    "user_href": "/profile/Sumedh-Khanolkar"
                },
                {
                    "user_id": "Vlad Pelv",
                    "user_href": "/profile/Vlad-Pelv"
                }
            ]
        },
        {
            "author_info": {
                "name": "Joshua Gross",
                "href": "/profile/Joshua-Gross-8"
            },
            "answer_text": "I have to be honest; there\u2019s a lot of nonsense in other answers here. I\u2019m a CS education researcher, actively involved in the community, and with some publications. We discuss meta-issues: the overarching issues that cause subsequent problems. This discussion is US-centric, although some of these issues apply elsewhere. The single biggest problem we have in computer science education is that we lack sufficient faculty. So much falls out from that. We\u2019re seeing roughly 70% of CS PhDs end up in industry either on graduation or within a few years. Very, very few return to academia, ever, while even at retirement, a steady number of PhDs trickle over to industry. Eric Roberts at Stanford has an interesting approach: a one-year MS in CS education, but admission requires a PhD in another discipline. The second biggest problem we have in computer science is lack of student success in CS1 (introduction to computer science). Students get discouraged easily, and leave the major. They often do poorly because they lack even moderate algebraic reasoning and study skills, and because they lack metacognitive skills necessary to emotionally recover from poor performance. It\u2019s not unusual to lose 50% of students who intend to study CS. Some schools game this number heavily by only admitting exceptional students, and/or students with prior CS coursework, but these numbers are typical at the vastly larger educational footprint of regional comprehensives. The third biggest problem is that, of the students we\u2019re able to bring in and retain, the vast majority tend to be white or Asian or of Asian heritage, and male. Since our graduation numbers are low, it is not a social engineering activity to focus significant attention on the students we lose or never get, students who are women and/or underrepresented minorities. EDIT: I should note that my research doesn\u2019t focus on any of these areas (anymore). I studied the first, but have no mechanism to resolve the problem, and I\u2019m not involved in any significant CS1-related research because there are too many people in that area. It\u2019s a hard problem, but it\u2019s being addressed. As for the third, I work on it, but not as research. ",
            "date": "Answered February 1, 2020",
            "views": "20",
            "upvotes": " View 244 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Steve Anderson",
                    "user_href": "/profile/Steve-Anderson-248"
                },
                {
                    "user_id": "Jukka Toivanen",
                    "user_href": "/profile/Jukka-Toivanen"
                },
                {
                    "user_id": "Anil Gathala",
                    "user_href": "/profile/Anil-Gathala"
                },
                {
                    "user_id": "Amanpreet Kapoor",
                    "user_href": "/profile/Amanpreet-Kapoor"
                },
                {
                    "user_id": "Justin Rising",
                    "user_href": "/profile/Justin-Rising"
                },
                {
                    "user_id": "Joseph Holdom",
                    "user_href": "/profile/Joseph-Holdom"
                },
                {
                    "user_id": "Mohamed Abdullahi",
                    "user_href": "/profile/Mohamed-Abdullahi-28"
                },
                {
                    "user_id": "Stephen Kurtzman",
                    "user_href": "/profile/Stephen-Kurtzman-1"
                },
                {
                    "user_id": "Jessica Su",
                    "user_href": "/profile/Jessica-Su"
                },
                {
                    "user_id": "Ari Jefferson",
                    "user_href": "/profile/Ari-Jefferson-2"
                }
            ]
        }
    ]
}