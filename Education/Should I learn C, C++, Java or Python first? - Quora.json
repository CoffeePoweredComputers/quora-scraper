{
    "title": "Should I learn C, C++, Java or Python first? - Quora",
    "tags": [
        "Career Advice for Computer Programmers",
        "Career Advice in Computer Science",
        "Programming Languages",
        "Computer Programming"
    ],
    "response": [
        {
            "author_info": {
                "name": "Joe Zbiciak",
                "href": "/profile/Joe-Zbiciak"
            },
            "answer_text": "You should learn how to program, before getting too wound up about which language you are using while you learn. However, whichever language you learn, be sure to learn its modern form, not an ancient and dead form. That means no Turbo C++. And, I\u2019d stay away from totally braindead languages like BASIC. When you learn your first programming language, you\u2019re learning at least two things at once: The syntax and quirks of your chosen language, andHow to turn a problem description into a programmed solution.The latter skill is transferable to any programming language. And as you gain mastery in that, you will find picking up new programming languages gets easier. Each programming language can teach you something different about the process of programming. In Peter Norvig\u2019s essay Teach Yourself Programming in Ten Years, he quotes Alan Perlis as saying \u201cA language that doesn\u2019t affect the way you think about programming is not worth knowing.\u201d Whichever language you learn first will teach you something. The next language you learn will hopefully teach you yet something else. I started with BASIC, then assembly, then Pascal, and then eventually C, Perl, and C++. I\u2019ve dabbled just a tad in Python, Java, Scala, and Go, but not enough I\u2019d ever claim to know the languages. You could start with C, which will teach you the basics of computing, and (if taught well) give you some grounding in how memory gets managed. You could start with C++, and learn about various other programming paradigms. etc. Pick a language that you have a support framework for: People who know the language who are willing to help you should you get stuck, and who can give you some guidance. Or, lacking that, good online resources that you\u2019re comfortable with using. I\u2019m told Python is rather approachable when getting started, and has a number of resources online for new Python programmers. I\u2019m not particularly proficient in Python, so I can\u2019t really judge. When I do need to write some Python, I end up opening a gadzillion browser tabs, figure out how to express what I need to get done in as pythonic way as I can divine from the resources, and move on. If you find yourself confused by whatever language you chose, switch gears and try another. Maybe you just got off on a wrong foot, and you can come back to it later and try again. I had that issue when I first approached C. Of course, there were other confounding issues, such as it being the first time I encountered a true compiler, with separate linker. I also lacked a support network of people and/or documentation that could explain the basics to me. And, in 1990, I couldn\u2019t just Google it. Still, even now, if you\u2019re new to a language, you might not know what to search for even if you do have Google. So, as I said before: Have a support network. As with so many other choices that have no clear signal driving the selection, I fall back to my standard advice: Pick one and see why it sucks. If it sucks too badly, pick another and see how it\u2019s better or worse. Wash, rinse, repeat. You\u2019ve got time. ",
            "date": "Answered February 14, 2018",
            "views": "34",
            "upvotes": " View 31 Upvoters",
            "upvoters": [
                {
                    "user_id": "Tanmay Girotra",
                    "user_href": "/profile/Tanmay-Girotra"
                },
                {
                    "user_id": "Tynan Douglas",
                    "user_href": "/profile/Tynan-Douglas"
                },
                {
                    "user_id": "The Polymath Universe",
                    "user_href": "/profile/The-Polymath-Universe"
                },
                {
                    "user_id": "Prasurjya Kashyap",
                    "user_href": "/profile/Prasurjya-Kashyap-2"
                },
                {
                    "user_id": "David Miklos",
                    "user_href": "/profile/David-Miklos-3"
                },
                {
                    "user_id": "Joseph Dailey",
                    "user_href": "/profile/Joseph-Dailey-9"
                },
                {
                    "user_id": "Lokesh Reddy",
                    "user_href": "/profile/Lokesh-Reddy-667"
                },
                {
                    "user_id": "Yathaarth Suri",
                    "user_href": "/profile/Yathaarth-Suri-1"
                },
                {
                    "user_id": "Aviral Srivastava",
                    "user_href": "/profile/Aviral-Srivastava-72"
                },
                {
                    "user_id": "Divyansh Kumravat",
                    "user_href": "/profile/Divyansh-Kumravat"
                }
            ]
        },
        {
            "author_info": {
                "name": "Franz Renger",
                "href": "/profile/Franz-Renger"
            },
            "answer_text": "I'm surprised that your school does not expose you to at least one language anyway as a lab requirement (often C or C++ in EE but not necessarily).Choose any one or sample them all before you decide. They are all pretty similar imperative languages. You will find it easy to learn another language once you are reasonably proficient in one. C is not object oriented so you can't learn that there. It's good for understanding machines though, which is very useful for an EE. I will also bite you but is says so on the box. Python is really beautiful to work with (personal opinion), a great learning experience and very unseful in many settings (although much less so in classical EE). It is, however, dynamically typed and interpreted. I'm quite glad I leard on something statically typed with a compiler so I could develop at least moderately disciplined habits for use in scripting languages. Of the languages you name C++ can potentially teach you the most different styles and concepts. For one thing C++ encompasses C. That does not make it harder to learn but it does make it hard to learn well. There are also some things better not learned as a beginner lest you actually use them in real life for things they were not meant to do. Every language has them but C++ feels like it contains them all. I haven't yet had the need or the desire to learn more than the most minimal Java so I won't say much about it. (To be honest it rubs me the wrong way so I tend to avoid it for purely irrational reasons.) I know many people who have learned it as their first language, they certainly don't complain. It certainly is a very useful language (again less so for classical EE). ",
            "date": "Answered November 28, 2015",
            "views": "12",
            "upvotes": " View 1 Upvoter",
            "upvoters": [
                {
                    "user_id": "Wahid S",
                    "user_href": "/profile/Wahid-S"
                }
            ]
        }
    ]
}