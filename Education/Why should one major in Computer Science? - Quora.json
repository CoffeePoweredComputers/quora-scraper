{
    "title": "Why should one major in Computer Science? - Quora",
    "tags": [
        "Computer Science Undergraduate Majors",
        "Computer Science Education Career Advice",
        "Academic Advice for Careers",
        "Career Advice and Computer Science Education",
        "Computer Science Education Advice",
        "College and University Majors",
        "Career Advice in Computer Science",
        "Computer Science Education",
        "Academic and Educational Advice"
    ],
    "response": [
        {
            "author_info": {
                "name": "Adam Voyton",
                "href": "/profile/Adam-Voyton"
            },
            "answer_text": "Is getting a bachelor's degree in Computer Science good major in 2019? As automation tech continues to replace human jobs, it\u2019s becoming more important than ever to have strong computer literacy and programming skills. Here's 20 reasons why majoring in Computer Science is a great way to secure a job in the software development field: APIs - Become competent in writing APIs to automate complicated tasks on enterprise web applications. Data Constructs - Understand the syntax, purpose, and structure of various data types Web Servers - Learn how to set up your own local server Relational Databases - Learn how to create a database with multiple tables that are joined by associative tables. Also learn how to draw UML diagrams. SDLC - Understand the components and typical stakeholders involved in the software development life cycle Get a Job! Become eligible for many entry level software developer job that pay well - right out of college. Computer programming jobs are in high demand. Build Web Pages and Entire Websites - Create responsive and accessible websites Apps - Develop interactive database-driven web applications and mobile apps Hand write custom functions/methods - Construct customize functions that accept arguments and transform data in complicated ways Business Process Design - Understand how to analyze complicated business procedures and then distilling them down to step-by-step workflows, including non-linear decision structures Object Oriented Programing - Learn about object-oriented programing concepts such as inheritance, polymorphism, abstract classes, exception handling Implement code libraries from other programmers - Understand how to use class libraries, collections, and what\u2019s involved in database connectivity. Architecture and protocols that run the World Wide Web - Get practical experience in designing and writing computer applications and the structure of the Internet, including the TCP/IP protocol. Graphical User Interfaces - Learn how to create a \u201cGUI\u201d, an common acronym in the tech industry that actually stands for graphical user interface. Control everything in your app from the color of background in a window to the exact location of icons. Modern user interfaces are as simple as filling out a web form or clicking buttons that triggers a specific behavior or event. Algorithms - Write algorithms to perform complex analyses, transform data, and perform calculations. Using these skills you can give an app interactivity and a logic engine to power sophisticated business applications. Conceptual, Logical, and Physical design - Write pseudocode to visually describe the step-by-step work flow of a complex computer app. Then create visual applications that have control structures and layout containers. Recursion and loops - Learn to write a recursive method that calls itself continuously and how to define its limit to prevent the construct from causing an infinite loop which will eventually force an app to crash. Validate Data - Learn how to utilize client and server-side validation on a web form that a user fills out a form to ensure the syntax is properly formatted, then ideally the data is validated before written to a database on the server. Learn Popular Programing Languages and MySQL - Create and insert data into a database using SQL statements and then query that data to add interactivity to your apps. Using these skills, you\u2019ll learn how to database to use multiple programming languages and relational database management systems to retrieve, update, insert, or delete data. Design Databases - Finally, you\u2019ll learn about database concepts, such as entity relationships, normalization, and the differences between conceptual, logical, and physical design. Anyone Can Learn to Code You may read this list above and think that it sounds complicated. But like any skill, it just takes time and practice to learn. All you really all you need is a strong foundation in math and a logical mindset to breakdown complicated processes into sequential tasks. Why I Changed from a Psychology Major to a Computer Science Degree I started college in 2006. During my first three years in college, I studied psychology while working full-time. To this day, I still think back to how much I enjoyed learning about the inner workings of the human mind - it's truly fascinating. And then one day, I stumbled upon a textbook on HTML - the markup language that is used to create practically every webpage you see on the Internet. Check it now on this page if you're curious - simply move your mouse cursor to the far right side of the screen on the blank area, right click, and then on the pop-up menu simply left-click where it says \"View Page Source\". Or just press the \"Ctrl + U\" keys together. This will reveal the code that makes a webpage work properly. As soon as I learned this, I quickly started creating my own webpages from scratch, that had hyperlinks, headings, images, embedded YouTube videos, and so much more. I read the entire 600 page textbook in less than a few weeks. I was hooked. Even though I was already a junior, I decided to meet with my academic advisor and changed my major to web information systems (a major very similar to computer science). A few years later, I graduated with my degree in Web Information Systems in 2011. When I first started, I didn't know anything about web design or computer programming. Now I could talk your ear off for hours about these topics. It's so fun and interesting. In the Age of Automation, Computer Science is a super important and relevant major In 2019, I think CS is such an important major. Dr. Aoun, a recognized expert on how AI is affecting higher education and the job market, recently stated: \u201cBecause for all of their dazzling power, machines are incapable of plucking inspiration from the subconscious, forming a new theory of physics after seeing an apple fall to the ground, or seizing a window of opportunity to start a business. Those sorts of cognitive abilities are impervious to automation. They are, indeed, robot-proof.\u201d My response to this quote: Robots simply follow a set of instructions that computers can understand. Contrary to popular belief, robots are not yet sentient. In fact, a study from the University of Wisconsin-Madison stated that \u201cSentient machines may never exist, according to a variation on a leading mathematical model of how our brains create consciousness.\u201d Regardless, computers are much more efficient than humans in performing certain calculations, for example the product of 1,312 and 55,000. Type that into any calculator and it\u2019ll pop right up as 72160000. Most humans wouldn\u2019t be able to read that number without the commas, let alone solve that problem in their head! Final Takeaway: Regardless of how slow firing neurons, we are the ones who code the calculators! ",
            "date": "Answered November 30, 2019",
            "views": "730",
            "upvotes": " View 1 Upvoter",
            "upvoters": [
                {
                    "user_id": "Kristina Setzekorn",
                    "user_href": "/profile/Kristina-Setzekorn"
                }
            ]
        },
        {
            "author_info": {
                "name": "Mark Miller",
                "href": "/profile/Mark-Miller-89"
            },
            "answer_text": "In a way, I know how you feel, though things have changed since I took CS. When I was entering college, I wasn't sure I wanted to take CS. From looking at the description, it looked too theoretical for my taste. I was interested in what I thought was application development (I had my own ideas about it, which didn't necessarily match reality). I looked at going into CIS (Computer Information Systems, a business major) instead, and didn't like what I saw there, either. At that time it was mostly Cobol programming, with some database management and database programming for good measure. Like you were saying, it looked like the \"easy\" route. I finally had a conversation with my high school's computer teacher. She had a CS degree, and so could speak authoritatively about it. She said that taking CS would teach me about how computers operate, and that would serve me in good stead working in the field. I took her advice, and went for the CS degree. In hindsight, I think she was partly right. I learned some things about how computers operate, but I didn't get a really good sense of what computing is from taking it. Not to say that a business degree would've been any better in that regard. I'm just saying this because in the last several years I've been trying to fill in what I didn't get out of it. Nevertheless, I was able to use the ideas I learned in CS, such as knowledge of pointers, understanding of data structures, and understanding of software engineering techniques to good effect in the software development work that was available to me at the time (this was in the 1990s). The software landscape has changed, and now it seems more incumbent on students to choose what kind of developer they're going to be than I was conscious of at the time. Web application development, and mobile device development have become major trends in business computing (though this could change by the time you get out of college. So that's something to consider). Now, CIS includes some of these technologies in their training program. They get into the technical details of business web applications, with heavy coverage of Java, database organization and access, of course HTML, and IT infrastructure. CS has tepidly gotten into these waters. I remember some years back talking to my old undergraduate advisor about this, and he said the CS Dept. at my alma mater had started up an IT program, with a CS emphasis, that covered the same material, but he wasn't enthusiastic about it. The reason being that focusing on IT infrastructure puts more emphasis on engineering, not the exploratory mathematical ideas that computer scientists like to focus on. CS has gotten criticized of late for being \"behind the times,\" still focusing on old techniques that are increasingly irrelevant. I think this is because what's taught in CS used to be more relevant to business computing. Now, not so much. The reason for this is that some of what CS teaches is now incorporated into language runtimes and application frameworks, which do the sort of work for you that business software developers used to have to do themselves. It's still useful knowledge to have, but application programmers don't have to create that infrastructure anymore. They just need to know which is the better option to pick, out of a selection of techniques, algorithms, and data structures. Where I think CS still has relevance in terms of a career in the private sector is in systems development, such as device drivers, programming language development, game development (where speedy code, understanding the hardware, AI, and knowledge of data structures still counts), embedded systems, working on open source projects (where there's still a lot of C/C++ code), and/or operating systems. The point is these technologies exist in different markets from business computing. I don't think taking CS will take you out of the running for web development or mobile development, if that's what you want to do. It's just that you'd have to do work outside of class to bone up on the necessary skills. When I took CS, the faculty prided itself on making their students flexible, able to adjust to the technological landscape as it changed. I don't know that CS has that spirit today, perhaps in certain programs, but it doesn't seem as widespread as it used to be. They used to do this by exposing us to a lot of different programming languages. Now that kind of program seems to be harder to find, since CS Dept.'s teach mostly using C++ and Java. The emphasis now seems to be teaching students how to understand different frameworks (code libraries). Best of luck. ",
            "date": "Answered September 22, 2014",
            "views": "36",
            "upvotes": " View 5 Upvoters",
            "upvoters": [
                {
                    "user_id": "Mislav Novalic",
                    "user_href": "/profile/Mislav-Novalic"
                },
                {
                    "user_id": "Nicole Brooks",
                    "user_href": "/profile/Nicole-Brooks-10"
                },
                {
                    "user_id": "Josh Bosley",
                    "user_href": "/profile/Josh-Bosley"
                },
                {
                    "user_id": "Alexander Mendenhall",
                    "user_href": "/profile/Alexander-Mendenhall"
                },
                {
                    "user_id": "Lynn",
                    "user_href": "/profile/Lynn-914"
                }
            ]
        }
    ]
}