{
    "title": "What's the difference between a computer science major student and those who learn coding online? - Quora",
    "tags": [
        "Career Advice for Computer Programmers",
        "Career Advice in Computer Science",
        "Computer Programming"
    ],
    "response": [
        {
            "author_info": {
                "name": "Quincy Larson",
                "href": "/profile/Quincy-Larson"
            },
            "answer_text": "You can learn everything online, but employers operate on \"pattern recognition\". A computer science degree will help you get past their defenses and get a job more easily.   According to Stack Overflow's 2015 Developer Survey of 26,000 developers, most developers don't have computer science degrees.  This said, anecdotal evidence suggests that at the very highest levels of the profession (Google, for instance), most developers do have computer science degrees. If you think about this for a moment, the reason for this is obvious. The more time you spend coding, the better you get at it.    And if you started coding when you were young, you probably chose computer science as your major.  So regardless of the quality of the education received, the computer science degree is correlated with an early passion for computers - and thus additional years of practice. There's nothing magical about a computer science degree. You can learn the necessary theory from some of the best teachers in the world for free online. You can get plenty of practice coding for free online. What you can't do for free online is get the pedigree associated with Stanford or MIT.   Pedigree is a mental shortcut. Pedigree helps employers commoditize you.  HR people will say things like, \"He's a Berkeley CS/EE grad\" or \"She's a Stanford CS major\". This way, non-technical HR people can assume you'll have a baseline programming knowledge - and be teachable enough to learn their company-specific practices and technologies - without having to bug a developer to investigate further. Until employers adopt more objective hiring practices - perhaps the coding equivalent of music's blind auditions - computer science degrees will continue to matter. So if you haven't chosen a major yet, you should absolutely study Computer Science or Software Engineering. If you majored in something else - or skipped college altogether - it's probably not worth going back now. Just learn everything for free online.  If you learn to code online, just be aware of HR departments' bias toward people with CS degrees, and know that you'll have to work a bit harder to get your foot in the door with employers. ",
            "date": "Answered August 12, 2015",
            "views": "506",
            "upvotes": " View 375 Upvoters",
            "upvoters": [
                {
                    "user_id": "Kritika Rupauliha",
                    "user_href": "/profile/Kritika-Rupauliha-1"
                },
                {
                    "user_id": "The Flash",
                    "user_href": "/profile/The-Flash-441"
                },
                {
                    "user_id": "Kawsar Hassan",
                    "user_href": "/profile/Kawsar-Hassan-2"
                },
                {
                    "user_id": "Jurij J. Dvo\u0159\u00e1k",
                    "user_href": "/profile/Jurij-J-Dvo\u0159\u00e1k"
                },
                {
                    "user_id": "Kyle Jackson",
                    "user_href": "/profile/Kyle-Jackson-125"
                },
                {
                    "user_id": "Tobias Hanl",
                    "user_href": "/profile/Tobias-Hanl"
                },
                {
                    "user_id": "Serano Tannason",
                    "user_href": "/profile/Serano-Tannason"
                },
                {
                    "user_id": "Dante Spencer",
                    "user_href": "/profile/Dante-Spencer-1"
                },
                {
                    "user_id": "Arvind Mishra",
                    "user_href": "/profile/Arvind-Mishra-112"
                },
                {
                    "user_id": "Mayur",
                    "user_href": "/profile/Mayur-125"
                }
            ]
        },
        {
            "author_info": {
                "name": "Jim McCusker",
                "href": "/profile/Jim-McCusker-2"
            },
            "answer_text": "For background: I'm a data scientist at a large research institution and have worked professionally for 16 years as a software engineer in startup-level product development, enterprise systems, and bioinformatics research. I also founded my own company providing software engineering services to small businesses. The curriculum is the main difference. Computer science isn't coding. When I interview a potential software engineer, I look for problem solving skills, proficiency with the technologies we are working with, aptitude to learn new tools, technologies, and domains (this one is critical), and computer science background. I don't care how the candidate comes by it. But they better know what a linked list is, how it's performance is different from an array, how to use each as a stack and queue, how different associative arrays work (when when to use each), basic graph theory, basic relational theory, how to perform a runtime analysis, and what it means for something to be NP complete and for it to be undecidable. They also better be able to create a data model for an address book application and explain the limitations and advantages of the model they chose. This is basic Data Structures (and a bit of Algorithms and Computability and Complexity). Why is this stuff important? It's the difference between writing the first thing that comes to mind that *might* work, and knowing that something will work even before you start typing.  You'd better also know your way around version control, automated build systems, and unit testing frameworks. These are software engineering fundamentals, not CS ones, but they're also important. Do you need to learn this in a class from a professor? No, but you're not going to learn it from a \"Teach Yourself How to Program Javascript in 10 Weeks\" or similar book. And from what I've seen, most self-taught programmers don't even know these topics exist, let alone that they are important. ",
            "date": "Answered August 17, 2015",
            "views": "798",
            "upvotes": "0"
        }
    ]
}