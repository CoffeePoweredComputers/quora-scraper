{
    "title": "For building a website, which programming language is easier to learn: Python or Java? - Quora",
    "tags": [
        "Programming Language Comparisons",
        "Python Vs. Java",
        "Learning Java",
        "Learning Python",
        "Comparisons",
        "Python (programming language)",
        "Java (programming language)",
        "Learning to Program",
        "Programming Languages",
        "Web Development"
    ],
    "response": [
        {
            "author_info": {
                "name": "Lam Luu",
                "href": "/profile/Lam-Luu-1"
            },
            "answer_text": "I will go ahead and disagree with the majority of answers here: Choice of languages matter a lot!Caveat: except for personal projects and toys.Java is hands down better than Python.Caveat 1: Java\u2019s advantages (will explain later) increase with difficulty of the requirements, so toy websites are indeed easier to do in Python. However, in that case, writing a static generator (in Python) is probably easiest.Caveat 2: There are specific cases where Python is better. If you are (or member of a teams who are) one of these Python wizards, well\u2026.. Plus, very simple, straight-forward websites can be done easier with Python. However, in about 90% of the time, Java wins.Let me go over the points one at a time. I) It is important to choose correct language Let me share with you 2 anecdotes: At work, I have seen a variety of languages employed. Without fail, Java (or C#, or one of those \u201cserious programming languages\u201d) projects are the best written, with the highest code coverage, with the most stability. Without fail. Ruby looks good until the 3rd person starts to work on the same project. Don\u2019t get me started on LISP (can be very nice, but extremely hard to get it correctly).Within the last 4 years, my most enjoyable programming experience involves (re-)implementation of a bunch of machine learning algorithms in Scheme. I felt so alive after the weekend of dreaming up beautiful structures.My point is, the language choice dictates much much more than we give credit for. To be 150% fair, the features of the language itself generally speaking are not the only deciding factor. However, the mere presence of a language tends to make or break code quality. In conclusion: Business-wise: choosing the right language usually save time, money, and a lot of trouble.Personal-wise:Right language makes your time much more enjoyable.New & correct language reforms your brain and optimizes it.Therefore, choose wisely! II) Java wins, hands down Here are the advantages of Java: Professionalism (probably more relevant in business setting)Using Java (& other \u201cprofessional languages\u201d like C#) feels similar to going to the library or wearing a pressed shirt. When you are in the library, no one forces you to read books or be prim and proper, but the feel of the place makes you want to do the above. Similarly, when I wear a pressed shirt, I can slouch; the shirt would rub against my back and shoulders, reminding me that it would much prefer to stay in shape.Java gives off such feeling. It feels so boring, so unexciting that hacks and clever tricks look stupidly out of place. It makes you want to write the kind of code that would fade in the background, but would rarely cause issues. Interestingly enough, this is the best kind of code.This way, code in Java tends to gravitate away from downright terrible. At worse, they look boring and tedious. However, I would take boring and tedious over crazy jackshit any day of the week.Availability of Expertise:No one should be surprised if Java has the most expertise around. This in term of available developers as well as available code snippets to learn from. Given that we usually learn by examples, these resources and expertise are invaluable.Furthermore, Java tends not to inspire holy war and works extremely hard to avoid opinions. Python, perl, Ruby, LISP (actually, each different flavors of LISP), Haskell, etc. have very strong and colorful characters. Java does not have such personality. Which may make it boring, but, again, only rarely do holy wars break out over Java. This tends to allow programmers to work together and learn from each other much better.Tooling:You can argue until your face is blue, but one thing is certain: as a programming language, Java has the best tooling. It has at least 3 outstanding IDEs (Eclipse, Netbeans, and IntelliJ), along with mirage of smaller systems. Each of these, then, have lots of plug-ins, which pretty much cover just about any situations you can find yourself in.Type system: OOP and staticOOP excels in description of a system. It\u2019s very good at saying \u201cwhat\u201d. Procedural and functional are better at saying \u201chow,\u201d but OOP describes \u201cwhat\u201d much better. This makes OOP describes long-running systems better. Functional & procedural talking about 1 task, which, but definition, has a start and an end. OOP talks about system description, which has neither start nor end.As such OOP describes website well. A website has neither start nor end. It just is, responding to users\u2019 requests. It fits very well with OOP. And Java is OOP. Not the most OOP, mind you, but it is OO enough to make things pleasant. It\u2019s certainly more OO than Python.Java is also statically typed, which is such a pleasant things to work with. Especially for larger systems that have tight coupling with its infrastructure (eg. your website!). Since the types a known at compiled (read: coding) time, your IDE can chase down all references and help you deciding what needs to go where. Python\u2019s (or perl\u2019s and Scheme\u2019s; the other 2 are among my favorites) type system gets extremely hard to deal with as the size of the project increases.Note that this is more than mere \u201cbug prevention.\u201d It\u2019s more pleasant to code in, too! Types usually describe the intention of the functions. Plus, you can easily navigate to declarations and implementations of whatever you need, which makes coding so much easier.JVM platform: stability in presence & future proofPython as a platform sucks compared to JVM. Frankly, anything-as-a-platform (except maybe Linux or unix) pales in comparison to JVM. Even .NET is not quite 100% JVM.See, JVM offers you roughly 2 major advantages.First, it highly prioritizes backward-compatibility. Only extremely rarely do you have issue with upgrading JVM. This reflects both advantages in compiling down to simpler system (bytecodes are easier to maintain backward-compatibility than fullblown languages) and priorities of Java as a project and community.Secondly, it supports myriad of other languages. You can have Scala, Groovy, Scheme (Kawa, thou art my love), etc. run side-by-side! Doing the same thing in Python requires a lot of finesse, if possible at all, and a lot of risk and performance penalty. Thus, when you choose Java, you are not locked out of other paradigm that Java as a language does not support well. When you choose Python, you\u2019d better be sure that you are really into Python.Performance: Without further elaboration, JVM is faster than Python. End of discussion.Libraries and support:Due to its longevity and status, Java enjoys enormous sets of 3rd party libraries. Its libraries are also much better support and written, compared to CPAN and Python\u2019s repo. Java also enjoys supports on many more platforms: AWS Lambda to Google cloud to plain Linux.Economics:One point to make clear: if you like to have fun, Python may be a good language (but how fun in Python? You can also have fun with Javascript and LISP and Haskell and perl). However, economically speaking, Java enjoys much more powerful network effects.More job posting is in Java. Reversely, more qualified candidates can work in Java. Better yet, due to Java nature (see above about holy wars), Java can be picked up much faster. Due to its conservative attitude, newbies in Java will pose smaller risks.Conclusion: do it in Java. Stay away from Python. Pythons are good for decoration and roasting (and scaring your siblings :P). I don\u2019t find it to be a good computer tool. ",
            "date": "Answered January 22, 2017",
            "views": "20",
            "upvotes": " View 77 Upvoters",
            "upvoters": [
                {
                    "user_id": "brkgyln",
                    "user_href": "/profile/brkgyln"
                },
                {
                    "user_id": "Sunil Kumar",
                    "user_href": "/profile/Sunil-Kumar-4310"
                },
                {
                    "user_id": "Ayush Sharma",
                    "user_href": "/profile/Ayush-Sharma-247"
                },
                {
                    "user_id": "Frances Watts",
                    "user_href": "/profile/Frances-Watts-11"
                },
                {
                    "user_id": "Seth Foster",
                    "user_href": "/profile/Seth-Foster-36"
                },
                {
                    "user_id": "Danielle Dixon",
                    "user_href": "/profile/Danielle-Dixon-104"
                },
                {
                    "user_id": "Rajeev Singh",
                    "user_href": "/profile/Rajeev-Singh-873"
                },
                {
                    "user_id": "Evelyn Cruz",
                    "user_href": "/profile/Evelyn-Cruz-206"
                },
                {
                    "user_id": "Evan Lopez",
                    "user_href": "/profile/Evan-Lopez-32"
                },
                {
                    "user_id": "Ivan Yakushenko",
                    "user_href": "/profile/Ivan-Yakushenko"
                }
            ]
        },
        {
            "author_info": {
                "name": "Jonathan Brodsky",
                "href": "/profile/Jonathan-Brodsky-1"
            },
            "answer_text": "Easy to learn is a really hard question to answer, because few programming languages are easy to learn how to use well; they're all easy to learn how to use poorly.  All programming languages have idiosyncrasies that become issues after a while; for example, with Python, getting that code to port to a native app experience is... well, damn hard.   Getting Java code to port (at least to Android) is a heck of a lot easier.   As other answers point out, Python / Flask is pretty simple in terms of lines of code you'd have to write and overall readability... but it's not necessarily the easiest language to learn (if you want to learn it, head over to miguelgrinberg.com for awesome -- and free -- tutorials.  It's by far the best resource I've found on Flask, and will help you build a competently functioning website fast).   However, if you're building a website, then you likely need to learn some basic Javascript as well so you can deliver a good user experience.  For a beginner, switching between Javascript and Python is a headache, mainly because of relatively minor syntactic differences in the languages that just suck when you're staring at code all day.  So if your goal is to just be up and running fast with a site that supports lots of slick interactions, you might be better off learning Javascript from something like Eloquent JavaScript or a similar book and at least getting far enough along to understand how to hack up someone else's JS to make it usable for you.  But then there's the question of what you want the website to do.  Certainly, if you're trying to build some huge banking application, then you're likely going to want to do it in Java (for no other reason than that's what the banks use, so they'll understand what you're writing).  If you want to build something that has strong AI capabilities, then maybe you'll want to learn a lisp like The Racket Language.  If your real goal is video games... well, C++ seems like the answer there.  Or, if you want to build something that's a website and compiles to an app all-in-one, you're back to Javascript or C# (Xamarin) or Oxygene or one of many, many other solutions (those just are the ones I'm familiar with off the top of my head). If you wanted to just put up a simple, static webpage, then all you need is HTML and CSS (which are really good to know regardless).    Because that's actually the easiest way to make a website.   If you're really just starting out, start from the very beginning -- sign up for a free account at Bento and start taking the tutorials that they link to (some are paid, some are not).  You'll figure out pretty quickly which languages think like you, and which don't -- all languages were designed by people, and those people had a specific way of thinking that carries through their languages.  Then you can dive in more and learn.  Eventually, you'll get down the rabbit hole far enough that you understand the trade-offs yourself between using Java vs Python for yourself, and assuming you pick Python (most people do find this way easier to learn, and it's got some awesome powerful libraries, too), then you'll be able to figure out which framework you need within Python -- be it Django, Flask, Pyramid, or any of the others. ",
            "date": "Answered November 23, 2015",
            "views": "151",
            "upvotes": " View 42 Upvoters",
            "upvoters": [
                {
                    "user_id": "Daniel Knight",
                    "user_href": "/profile/Daniel-Knight-57"
                },
                {
                    "user_id": "Chandra Jollu",
                    "user_href": "/profile/Chandra-Jollu"
                },
                {
                    "user_id": "Santiago Perman",
                    "user_href": "/profile/Santiago-Perman"
                },
                {
                    "user_id": "Ahimbisibwe Roland",
                    "user_href": "/profile/Ahimbisibwe-Roland-1"
                },
                {
                    "user_id": "Gary Hayden",
                    "user_href": "/profile/Gary-Hayden-5"
                },
                {
                    "user_id": "Don'Von Wiley",
                    "user_href": "/profile/DonVon-Wiley"
                },
                {
                    "user_id": "Adriano De Lucca",
                    "user_href": "/profile/Adriano-De-Lucca"
                },
                {
                    "user_id": "Rachit Mathur",
                    "user_href": "/profile/Rachit-Mathur-27"
                },
                {
                    "user_id": "Ahmed Hlilioune",
                    "user_href": "/profile/Ahmed-Hlilioune-1"
                },
                {
                    "user_id": "Jussi Asp",
                    "user_href": "/profile/Jussi-Asp"
                }
            ]
        }
    ]
}