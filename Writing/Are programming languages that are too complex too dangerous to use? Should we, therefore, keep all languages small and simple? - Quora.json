{
    "title": "Are programming languages that are too complex too dangerous to use? Should we, therefore, keep all languages small and simple? - Quora",
    "tags": [
        "Learning to Program",
        "Programming Languages"
    ],
    "response": [
        {
            "author_info": {
                "name": "Richard Kenneth Eng",
                "href": "/profile/Richard-Kenneth-Eng"
            },
            "answer_text": "I believe so. And I\u2019m not alone. The late Per Brinch Hansen, author of the Edison programming language, believed so. Niklaus Wirth, author of Pascal and Oberon, believed so. Rob Pike, co-author of Go, believed so. There are many, many developers who believe in using a programming language that carries a very low cognitive load. Programming is hard enough as it is without having to fight with your coding tool. Having to hold too many arcane language details in your head makes it more likely that you will make a mistake. Mental stress is real, no matter how subtle it may be. Pythonistas speak of the Zen of Python programming. Smalltalkers also speak of the Zen of Smalltalk programming. This is no accident. These languages have very clean and concise syntax. They\u2019re easy to use, esp. for beginners. Languages like Elixir, Nim, and Scheme are also praised for their low cognitive load. How often have you heard complaints about C++, Scala, Swift, and now JavaScript being too large and complicated? This is a real issue. The argument that today\u2019s more complex and demanding programming problems require more complex and demanding programming languages is pure and utter rubbish. Smalltalk, for example, is perfectly capable of dealing with problems of any size and complexity. In the early 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. It actually outperformed a similar simulation called STORM written in C++ by the U.S. Air Force. That by itself was an astonishing testament to the capabilities of the language. C++: 0. Smalltalk: 1. This is clearly a divisive issue. Many programmers like the more complex languages, too. The marketplace will decide. ",
            "date": "Answered October 14, 2018",
            "views": "53",
            "upvotes": " View 45 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Alan Mellor",
                    "user_href": "/profile/Alan-Mellor"
                },
                {
                    "user_id": "Swapnadip Moni",
                    "user_href": "/profile/Swapnadip-Moni"
                },
                {
                    "user_id": "Mohammed Azeez",
                    "user_href": "/profile/Mohammed-Azeez-8"
                },
                {
                    "user_id": "Gustavo Pezzi",
                    "user_href": "/profile/Gustavo-Pezzi"
                },
                {
                    "user_id": "Nagesh Hebbar",
                    "user_href": "/profile/Nagesh-Hebbar"
                },
                {
                    "user_id": "Peter Lewerin",
                    "user_href": "/profile/Peter-Lewerin"
                },
                {
                    "user_id": "Francis CIlwin Cyriac",
                    "user_href": "/profile/Francis-CIlwin-Cyriac"
                },
                {
                    "user_id": "Rich Whitsell",
                    "user_href": "/profile/Rich-Whitsell"
                },
                {
                    "user_id": "Karthikeyan Rajasekar",
                    "user_href": "/profile/\u0b95\u0bbe\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bbf\u0b95\u0bc7\u0baf\u0ba9\u0bcd-\u0bb0\u0bbe\u0b9c\u0b9a\u0bc7\u0b95\u0bb0\u0bcd-Karthikeyan-Rajasekar"
                },
                {
                    "user_id": "Rob James",
                    "user_href": "/profile/Rob-James-179"
                },
                {
                    "user_id": "Harshit Anand",
                    "user_href": "/profile/Harshit-Anand-6"
                },
                {
                    "user_id": "Valeriy Ivanov",
                    "user_href": "/profile/Valeriy-Ivanov-5"
                },
                {
                    "user_id": "Vitor de Paula",
                    "user_href": "/profile/Vitor-de-Paula-1"
                },
                {
                    "user_id": "Aaron Agostini",
                    "user_href": "/profile/Aaron-Agostini-1"
                },
                {
                    "user_id": "John Shea",
                    "user_href": "/profile/John-Shea-1"
                },
                {
                    "user_id": "Xin Huang",
                    "user_href": "/profile/Xin-Huang-129"
                },
                {
                    "user_id": "Flavio Rocha",
                    "user_href": "/profile/Flavio-Rocha-6"
                },
                {
                    "user_id": "John Hevener",
                    "user_href": "/profile/John-Hevener"
                },
                {
                    "user_id": "Paul McQuesten",
                    "user_href": "/profile/Paul-McQuesten"
                },
                {
                    "user_id": "Freddie Posey",
                    "user_href": "/profile/Freddie-Posey"
                },
                {
                    "user_id": "Antonio Julian Arrieta Cuartero",
                    "user_href": "/profile/Antonio-Julian-Arrieta-Cuartero"
                },
                {
                    "user_id": "Waleed Nasser Al-Ghadamsy",
                    "user_href": "/profile/Waleed-Nasser-Al-Ghadamsy"
                },
                {
                    "user_id": "Robin Bornschein",
                    "user_href": "/profile/Robin-Bornschein"
                },
                {
                    "user_id": "Abdus-Salam Beckham",
                    "user_href": "/profile/Abdus-Salam-Beckham"
                },
                {
                    "user_id": "Rajesh Nair",
                    "user_href": "/profile/Rajesh-Nair-4"
                },
                {
                    "user_id": "Joe Harris",
                    "user_href": "/profile/Joe-Harris-186"
                },
                {
                    "user_id": "Yiannis Karagiannis",
                    "user_href": "/profile/Yiannis-Karagiannis"
                },
                {
                    "user_id": "Kalyan Ayyagari",
                    "user_href": "/profile/Kalyan-Ayyagari-1"
                },
                {
                    "user_id": "Bob Dickson",
                    "user_href": "/profile/Bob-Dickson-4"
                },
                {
                    "user_id": "Sohail Morady",
                    "user_href": "/profile/Sohail-Morady"
                },
                {
                    "user_id": "Nat Condit-Schultz",
                    "user_href": "/profile/Nat-Condit-Schultz"
                },
                {
                    "user_id": "Akshay C",
                    "user_href": "/profile/Akshay-C-98"
                },
                {
                    "user_id": "Yash Sharma",
                    "user_href": "/profile/Yash-Sharma-478"
                },
                {
                    "user_id": "Thomas Knowles",
                    "user_href": "/profile/Thomas-Knowles-6"
                },
                {
                    "user_id": "Chaise Murphy",
                    "user_href": "/profile/Chaise-Murphy"
                },
                {
                    "user_id": "Leo Tilson",
                    "user_href": "/profile/Leo-Tilson"
                },
                {
                    "user_id": "Anders Blehr",
                    "user_href": "/profile/Anders-Blehr"
                },
                {
                    "user_id": "Jodie Price",
                    "user_href": "/profile/Jodie-Price-31"
                },
                {
                    "user_id": "Gene Kim",
                    "user_href": "/profile/Gene-Kim-7"
                },
                {
                    "user_id": "Marek Job",
                    "user_href": "/profile/Marek-Job"
                },
                {
                    "user_id": "Sidharth Mav",
                    "user_href": "/profile/Sidharth-Mav-1"
                },
                {
                    "user_id": "Garry Taylor",
                    "user_href": "/profile/Garry-Taylor-5"
                },
                {
                    "user_id": "Gaab Thobo",
                    "user_href": "/profile/Gaab-Thobo"
                },
                {
                    "user_id": "Tae Lim Kook",
                    "user_href": "/profile/Tae-Lim-Kook"
                },
                {
                    "user_id": "Naingtun Lin",
                    "user_href": "/profile/Naingtun-Lin-1"
                }
            ]
        },
        {
            "author_info": {
                "name": "Jim Rogers",
                "href": "/profile/Jim-Rogers-38"
            },
            "answer_text": "Danger implies safety issues. There is no direct correlation between the complexity of a programming language and program safety. While complexity can result in confusion, which can impact safety, simplicity can also be unsafe. The C programming language has long been spoken of as a simple language, yet the C language is far from a safe language. The MISRA-C standard was created to define a subset of C suitable for use on safety-critical systems. The Ada language has long been spoken of as a complex language, yet use of the full Ada language is even safer than use of the C language in compliance with safety-critical coding standards. Ada was designed with safe behaviors as the default behaviors, requiring extra work by the programmer to achieve the un-safety which is the default in C. The following article compares Ada with a safety-critical subset of C++. Notice that most of the restrictions on C++ are also restrictions on C. Comparing Ada and High Integrity C++ ",
            "date": "Answered October 14, 2018",
            "views": "187",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Keith Mayhew",
                "href": "/profile/Keith-Mayhew-1"
            },
            "answer_text": "Assembler is pretty small and simple, but you can shoot yourself in the foot with it very easily! More complex languages like Idris or Agda can help you to avoid doing things that are dangerous or logically incorrect. There really isn\u2019t much correlation! Of course it\u2019s good to keep languages small and simple where possible, but it is entirely dependent on what the goals and uses are. It\u2019s all a very hard trade-off. Make it too simple and you end up needing to use coding idioms or just moving things into libraries. In other words you may just be playing with the illusion of simplicity but making the code more complex and harder to read. That is \u201cdangerous\u201d as it comes at the cost of maintainability and correctness. For example, if you add a strong static type system to a language, that\u2019s made it more complex. If you remove it you\u2019ve made it simpler but now do you write test suites instead or just hope it won\u2019t fail at run time? ",
            "date": "Updated October 16, 2019",
            "views": "161",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Prem Sobel",
                "href": "/profile/Prem-Sobel"
            },
            "answer_text": "Dangerous??? What is \u201cdangerous\u201d is programmers who do not take the responsibility to test their own code. C is a relatively simple language yet it is very powerful, and some languages eliminate C\u2019s absolutely essential ability to have a variable which is a pointer to a function. With C, if one writes a program without the need to malloc, they have less chance to make mistakes, but they can still do many of the typical mistakes. That is why the utility (available only in Linux) called valgrind (see: Valgrind Home) exists which finds all these mistakes. I highly recommend the use of valgrind to test every C or C++ program one writes. ",
            "date": "Answered October 14, 2018",
            "views": "190",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Emilio Garavaglia",
                "href": "/profile/Emilio-Garavaglia"
            },
            "answer_text": "Not necessarily: \u201cdanger\u201d is a security thing. Complexity is about how many different paradigms you can support and eventually intermix. You can have small and simple languages. Bit as soon you programs becomes bigger and bigger you start to demand features an features. Making the language more and more complex. 90% of a big program is not even language keywords: it\u2019s just user made function and variables invocation and evocation. ",
            "date": "Answered October 28, 2018",
            "views": "110",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Russell Childs",
                "href": "/profile/Russell-Childs-2"
            },
            "answer_text": "The problem is cowboy-coding. Safety-critical projects allow C++ provided very strict design, coding and testing standards are followed, in order to meet government safety regulations. The most difficult thing is going from a safety-critical physics or hardware project to a company like MSFT, where there are no standards and code becomes a mare\u2019s nest of spaghetti. Accordingly, it is not the language, but how it is abused that results in problems. ",
            "date": "Answered October 15, 2018",
            "views": "201",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Simon Kepp Nielsen",
                "href": "/profile/Simon-Kepp-Nielsen"
            },
            "answer_text": "In my mind, thay depends on the requirements of specific projects. For some projects, security is the primary concern, and that would advocate simple and safe languages. In. Many other projects, cost of development and maintenance outweigh security, and this would sometimes favour more complex languages. ",
            "date": "Answered October 15, 2018",
            "views": "56",
            "upvotes": "0"
        }
    ]
}