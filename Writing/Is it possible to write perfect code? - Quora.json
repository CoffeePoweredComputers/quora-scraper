{
    "title": "Is it possible to write perfect code? - Quora",
    "tags": [
        "Programming Languages"
    ],
    "response": [
        {
            "author_info": {
                "name": "Damien Filiatrault",
                "href": "/profile/Damien-Filiatrault"
            },
            "answer_text": "I've been thinking about this since I was asked a similar question a few days ago. The idea of \u2018perfect code\u2019 is actually quite a philosophical question because it really depends on how you define 'perfect'. What does perfect code mean? The definition of \u201cperfect\u201d could be based on the stated goal of the program being built. If the goal of the program is to find the first 20 prime numbers, for example, I could do that. If the goal is about more than achieving that result, and about achieving it in the most efficient (use of processor power) manner possible, then it is harder. In this case, because the program goal is simple it is still possible. However, it would not be possible for me to write a perfect firewall. Well, no one has so far anyway. Also, there may be multiple ways to achieve the stated goal with the same efficiency. Do \u2018perfect\u2019 coders even exist? I've never met one of these \u2018perfect' coders. But I have met extremely good engineers that follow comprehensive development practices and write code of excellent quality. But\u2026 from time to time they end up writing-in bugs. We are all human after all. So, should \u2018perfect code\u2019 be a goal at all? If you are working for a startup, validating the business hypothesis quickly is arguably more important than writing bug-free code. Maybe writing well-documented code is better than striving for perfect code? People I've asked are split down the middle on this one. Half say that great code is code that can be universally understood through its documentation. Others say that great code is great precisely because it can be understood without documentation. Your code doesn't operate in a vacuum. There are many other factors beyond the code that have an impact on its perception: - A simple misunderstood or miscommunicated requirement can lead to a \u201cbug\u201d. - The platform you are running your code on may have a bug that makes your software fail. - Hardware can affect how software runs. Perfect now = imperfect later? What may begin as perfect code can become buggy if the software, framework, platforms, etc., are upgraded. So, even if your software is perfect at one point in time, it may not last forever. You can make the code fault tolerant so it will not break later, and instead gracefully handle edge cases or errors. But that is not \u2018perfect\u2019! So, yes, you can you write perfect code, but just for tiny trivial programs. For all practical purposes, you cannot. The state of your code is based on context, perspective and time. It\u2019s starting to sounds more and more like an abstract concept, right? Should you care? Nope. Focus on writing clean and consistent code. Pushing yourself to make it as close to perfect as you can through constant refactoring is unlikely to be commercially viable. Make it do what it is meant to simply and efficiently; make it handle errors elegantly, make it easy to debug, make it easy to scale and make it practical. This is why we have so heavily integrated ongoing testing, QA and debugging into the deployment processes, rather than just looking to hire perfect coders. ",
            "date": "Answered April 5, 2018",
            "views": "19",
            "upvotes": " View 18 Upvoters",
            "upvoters": [
                {
                    "user_id": "Timothy Johnson",
                    "user_href": "/profile/Timothy-Johnson-6"
                },
                {
                    "user_id": "Rachel Gair",
                    "user_href": "/profile/Rachel-Gair-2"
                },
                {
                    "user_id": "Brei Maree Barron",
                    "user_href": "/profile/Brei-Maree-Barron-1"
                },
                {
                    "user_id": "Tyler Dalton",
                    "user_href": "/profile/Tyler-Dalton-7"
                },
                {
                    "user_id": "Stacey Medwid",
                    "user_href": "/profile/Stacey-Medwid"
                },
                {
                    "user_id": "Logan R. Kearsley",
                    "user_href": "/profile/Logan-R-Kearsley"
                },
                {
                    "user_id": "Achim Strohm",
                    "user_href": "/profile/Achim-Strohm-1"
                },
                {
                    "user_id": "Sharwari Phadnis",
                    "user_href": "/profile/Sharwari-Phadnis"
                },
                {
                    "user_id": "Davnish Singh",
                    "user_href": "/profile/Davnish-Singh-1"
                },
                {
                    "user_id": "Luka Leer",
                    "user_href": "/profile/Luka-Leer"
                }
            ]
        },
        {
            "author_info": {
                "name": "Jithin Pavithran",
                "href": "/profile/Jithin-Pavithran"
            },
            "answer_text": "It depends on what is perfect! Say you want me to write a program to find sum of small integers, and you define perfection as accuracy. Then yes, I can write the perfect code for you. Say you want me to include division of decimal numbers in it. Now I can't (Hardware is limiting me now.) If you want me to write a firewall, and you call it perfect when it is 100% unbreachable. Now I can't write the perfect one (in software systems nothing is fully secure). The problem statement itself is limiting me now. Now you give me an NP-hard problem, and define perfection in terms of speed, now my brain is limiting me. And in real world, perfection is a combination of many aspects, making it almost unachievable. ",
            "date": "Answered December 7, 2017",
            "views": "561",
            "upvotes": " View 11 Upvoters",
            "upvoters": [
                {
                    "user_id": "Harshal Kailash Gawai",
                    "user_href": "/profile/Harshal-Kailash-Gawai"
                },
                {
                    "user_id": "Sumit Jagtap",
                    "user_href": "/profile/Sumit-Jagtap-19"
                },
                {
                    "user_id": "Jhansi Vipulasri",
                    "user_href": "/profile/Jhansi-Vipulasri"
                },
                {
                    "user_id": "Jashwanth R",
                    "user_href": "/profile/Jashwanth-R-1"
                },
                {
                    "user_id": "Chaithanya R Sankara Sai",
                    "user_href": "/profile/Chaithanya-R-Sankara-Sai"
                },
                {
                    "user_id": "Gautam Sreekumar",
                    "user_href": "/profile/Gautam-Sreekumar-1"
                },
                {
                    "user_id": "Dale Strickler",
                    "user_href": "/profile/Dale-Strickler-1"
                },
                {
                    "user_id": "Vivek Pratap Chaurasia",
                    "user_href": "/profile/Vivek-Pratap-Chaurasia"
                },
                {
                    "user_id": "Ramya Krishna",
                    "user_href": "/profile/Ramya-Krishna-259"
                },
                {
                    "user_id": "Devesh Avutu",
                    "user_href": "/profile/Devesh-Avutu"
                }
            ]
        }
    ]
}