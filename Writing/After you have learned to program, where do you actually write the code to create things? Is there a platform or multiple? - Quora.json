{
    "title": "After you have learned to program, where do you actually write the code to create things? Is there a platform or multiple? - Quora",
    "tags": [
        "Learning Software Engineering",
        "Programming Computer Applications",
        "Beginning Computer Programming Advice",
        "Computer Programmers",
        "Learning New Things",
        "Software Engineering",
        "Learning to Program",
        "Programming Languages",
        "Web Development"
    ],
    "response": [
        {
            "author_info": {
                "name": "Richard Conto",
                "href": "/profile/Richard-Conto"
            },
            "answer_text": "The question is \u201cAfter you have learned to program, where do you actually write the code to create things? Is there a platform or multiple?\u201d For me, they were always inseparable. Besides learning how to compose code and write correct algorithms, I also had to learn how to enter the body of the program (part of the compose code part for programmable calculators), save the code (on those calculators that could) and run the code. On mainframes and microcomputers, I learned how to save and restore programs to files, and (on machines with removable media) manage the removable media. It was an incremental process. At first, the steps were boiler-plate that was given to us by our instructors - but later I learned how to use editors to save files and compilers and assemblers to create object files and linkers to produce an executable. After that, I learned how to use build tools (Makefile\u2019s mostly, but scripting too) to automate much of the compiling and linking. And eventually additional tools to automate the creation of Makefiles. All of the scripting and Makefile writing and other automation involved learning more programming skills and developing different abstractions to better represent the processes involved. Along the way, the benefit of version management systems became apparent. I\u2019ve been through a lot of those. Distributing the code (for me) was to automate as much of this as possible and packaging it up so that others could have access to it and build it for themselves - but distribution (however it\u2019s done) is clearly another process distinct from programming, version management, and developing a build system. ",
            "date": "Answered January 28, 2019",
            "views": "357",
            "upvotes": " Answer requested by Max Umansky",
            "upvoters": [
                {
                    "user_id": "Kevin Ossia",
                    "user_href": "/profile/Kevin-Ossia"
                },
                {
                    "user_id": "Poul Bundgaard",
                    "user_href": "/profile/Poul-Bundgaard-1"
                }
            ]
        },
        {
            "author_info": {
                "name": "Alec Cawley",
                "href": "/profile/Alec-Cawley"
            },
            "answer_text": "For the first thirty years or so of my programming career, using the text editor that most suited my taste amongst those in my environment. From PTSOS on the first computer I programmed (Paper Tape and Scissors Operating System) through TECO on RT11 to sundry others I cannot remember now. Only recently have IDEs become good enough for my needs - but they have. But this is very personal. Looking round my workplace, I see Visual Studio, Eclipse (and forks), vim, emacs, Sublime. There are probably others. ",
            "date": "Answered January 27, 2019",
            "views": "236",
            "upvotes": " View 2 Upvoters",
            "upvoters": [
                {
                    "user_id": "Abdullah Mubasshar",
                    "user_href": "/profile/Abdullah-Mubasshar"
                }
            ]
        },
        {
            "author_info": {
                "name": "Daniel Jacob",
                "href": "/profile/Daniel-Jacob-18"
            },
            "answer_text": "This depends on the platform and/or programming language that you are writing your code for. I will sum up a few: Android studio: used to write code for android.Xcode: used for programming in iosIntellij idea: What android studio is based on and can be used to write different types of applications. Main focus is on enterprise applications in languages that run on JVM (i.e. Java, Scala, Kotlin, Groovy).Visual studio/visual studio code: Used to write code for .NET platform (i.e. C#, F#, visual basic and other language that run on the common language runtime).Text-editors: Can be used to write code in any language that the text-editor in questions supports (i.e. notepad++, sublime, atom). These text-editors don't have the full features that the above integrated development environments have.",
            "date": "Answered January 27, 2019",
            "views": "393",
            "upvotes": " View 1 Upvoter"
        }
    ]
}