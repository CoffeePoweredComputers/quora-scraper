{
    "title": "Is user story the best form of requirement in agile project? - Quora",
    "tags": [
        "Agile Software Development"
    ],
    "response": [
        {
            "author_info": {
                "name": "S Millward",
                "href": "/profile/S-Millward"
            },
            "answer_text": "User stories are not requirements. They are planning tokens; placeholders for a future conversation. I fully accept the concept has been \u2018commercialised\u2019 to the point where its beyond meaningless. Most of what I see written about \u2018stories\u2019 these days is pure dogma because no one is going pay \u00a31000 a day simply to be told the the above sentence. Artificial bullshit is added that \u2018creates work\u2019 ( the worst possible form of waste ). The \u2018best\u2019 form of requirement is an executable test. Because: It is unambiguous. ( strict inputs and outputs )It is repeatable. ( no bias, mistakes or misinterpretation )It is executable ( and so easily re verified, frequently and efficiently ).It is therefore formal. You software either passes it or it doesn\u2019t. Requirement met, or requirement not met.There is no middle man.. no interpretation from natural language, no ambiguous and/or over complex diagrams etc.Everything that precedes it merely informal discussion. The discussion is important, but using it as definition of a requirement is flawed. ",
            "date": "Answered May 9, 2017",
            "views": "285",
            "upvotes": " View 3 Upvoters",
            "upvoters": [
                {
                    "user_id": "Vj Zy",
                    "user_href": "/profile/Vj-Zy"
                },
                {
                    "user_id": "Oleg Avrah",
                    "user_href": "/profile/Oleg-Avrah"
                },
                {
                    "user_id": "Rich Conte",
                    "user_href": "/profile/Rich-Conte"
                }
            ]
        },
        {
            "author_info": {
                "name": "Gerry Claps",
                "href": "/profile/Gerry-Claps"
            },
            "answer_text": "Not by itself. tl;dr: User Stories, Job Stories and other pieces of context combine to form the 'best' way to express project requirements.  Depending on the detail of the requirement (e.g. a small bug) you might not need any structure at all... or you may need to fill it with UI designs, sketches, prototypes, interview notes, survey results, and so on. But for most cases, a User Story provides a simple, light-weight framework for writing down solution requirements.  As a <user>I want <functionality>So that <benefit> However, when trying to define what to make the \"So that\" of a user story usually does not provide enough context to define the true motivation behind what a user wants to use... This is where Job Stories come into play. They focus on the context and situation of the user, that is, their goal.   When <situation>I want to <motivation>So I can <expected outcome> The clear line between a user's goal and the solution(s) that are implemented to fulfill it, is why the user story alone cannot effectively detail all the aspects of a requirement.  In other words, one goal can be solved by many solutions.   It's important to note that user stories originated from Extreme Programming \u2014 however they are commonly seen as best practice in Scrum teams. ",
            "date": "Answered July 14, 2015",
            "views": "842",
            "upvotes": " View 3 Upvoters",
            "upvoters": [
                {
                    "user_id": "Almog Horowitz",
                    "user_href": "/profile/Almog-Horowitz"
                },
                {
                    "user_id": "Scott Helms",
                    "user_href": "/profile/Scott-Helms-8"
                },
                {
                    "user_id": "Luke Kerr",
                    "user_href": "/profile/Luke-Kerr"
                }
            ]
        },
        {
            "author_info": {
                "name": "Natalia Sandrigailo",
                "href": "/profile/Natalia-Sandrigailo"
            },
            "answer_text": "A user story is just a simple way of expressing requirements. the main techniques to elicit requirements are use cases, wireframes, and storyboards. A User Story is another way of doing that same thing. They're easy to write, easy to read, and easy to evaluate. What's so special about User Stories? User Stories are meant to keep all of the requirements of your system in a consistent format. User stories follow a very specific format. As a ___ (user, manager, developer\u2026) ,I want to ___ ,So that _____.The first blank signifies the stakeholder role for whom the requirement is being formed. These don't have to be specific people you have in mind. Just a general audience for the requirements. This helps to narrow down who the requirement is meant to support. It specifies the who of the requirement. The stated requirement is written as if from a stakeholder's point of view. The second blank signifies the task or function the stakeholder wants to resolve using the product. This the meat of the requirement and is usually what people think of most when they think: requirement. This part specifies what of your requirement. (I want to browse, i want to see, i want to get\u2026 ) The final blank of the user story specifies \u201cwhy\u201d the user story is needed in the first place. it offers a key insight into their requirement. It gives context to the requirement about the value or benefits it offers, which aligns with the product's goals or vision. So, a full user story might look like As a Customer,I want to see the drop-down menu,so that I see what games interest me.Do you see how it comes together as one whole? Having seen the way user stories are created, does it make sense why they're structured the way they are? They bring a lot of clarity to a requirement. Without bugging it down in technical detail. You get the \u201cwho\u201d, the \u201cwhat\u201d and the \u201cwhy\u201d all in neat little package. As a bonus to having short concise user stories like this: you can easily write them down to keep tracking them. In fact, user stories were designed to be compact enough to fit on index cards or sticky notes. This way, all of the user stories could be laid out and organized in a very visual, physical, and informative way. By having the stories on index cards, they can be easily clumped into related groups. And reorganized when the requirements inevitably change. User stories are meant to be written by your client because your client usually knows what they want in the product. However, the software product manager often ends up writing user stories. This isn't because clients aren't interested in specifying what their products should do. It's usually due to a lack of experience, or training, in creating user stories. This doesn't mean you shouldn't ask your client to create user stories. It means that you and your development team may be required to help them express their needs in the user story form. A good practice is to give just enough information that the story can be understood well enough for a developer to implement it, but not so much that you begin to specify implementation details. Any feedback would be appreciated) happy to share my knowledge and experience with you that I\u2019ve got due the practice in my IT company[1] \ud83d\udc95\ud83d\ude09 Footnotes[1] Enterprise Grade Cloud Services | Kubernetes, Blockchain, AI | Altoros",
            "date": "Updated July 15, 2020",
            "views": "46",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Adrian Howard",
                "href": "/profile/Adrian-Howard"
            },
            "answer_text": "\"Best\" is quite a strong term. It's certainly common, and I find the form useful in many situations. There's also the question of what exactly is meant by user story. The term's been around for a while and different folk interpret it very differently.  There are other ways of capturing descriptions of end-to-end value that some folk find useful. For example I've been playing with the hypothesis/experiment model from the Lean Startup quite a lot over the last couple of years and \"hypothesis\" rather than \"story\" has become the base unit of progress in a lot of the projects I've been working on of late. ",
            "date": "Answered May 30, 2013",
            "views": "660",
            "upvotes": " View 3 Upvoters",
            "upvoters": [
                {
                    "user_id": "Stephen Wolff",
                    "user_href": "/profile/Stephen-Wolff"
                },
                {
                    "user_id": "Luke Kerr",
                    "user_href": "/profile/Luke-Kerr"
                },
                {
                    "user_id": "Kulawat Pom Wongsaroj",
                    "user_href": "/profile/Kulawat-Pom-Wongsaroj"
                }
            ]
        },
        {
            "author_info": {
                "name": "Cliff Gilley",
                "href": "/profile/Cliff-Gilley"
            },
            "answer_text": "The \"best\" form of product requirements in Agile is whatever you need to deliver to the development teams so that they understand what's being asked of them, and provides them with sufficient information to begin work with an end goal in mind.  Generally, user stories are the best fit, but not always - sometimes it's an annotated wireframe, sometimes it's just a flowchart.  Do what works, and the results will speak for themselves. ",
            "date": "Answered May 29, 2013",
            "views": "12",
            "upvotes": " View 6 Upvoters",
            "upvoters": [
                {
                    "user_id": "Mario Lavandero",
                    "user_href": "/profile/Mario-Lavandero-1"
                },
                {
                    "user_id": "Steven Loi",
                    "user_href": "/profile/Steven-Loi"
                },
                {
                    "user_id": "Luke Kerr",
                    "user_href": "/profile/Luke-Kerr"
                },
                {
                    "user_id": "Kulawat Pom Wongsaroj",
                    "user_href": "/profile/Kulawat-Pom-Wongsaroj"
                },
                {
                    "user_id": "Ollie Glass",
                    "user_href": "/profile/Ollie-Glass"
                },
                {
                    "user_id": "Jared Franklin",
                    "user_href": "/profile/Jared-Franklin"
                }
            ]
        },
        {
            "author_info": {
                "name": "JP Park",
                "href": "/profile/JP-Park"
            },
            "answer_text": "I think Cliff is 100% correct about what qualifies as \"preferred\" I prefer User stories because it humanize the requirement. I want my developer partners to understand for who they are building a solution and feel a part of the solution process rather than just blindly giving them something to build. ",
            "date": "Answered May 29, 2013",
            "views": "11",
            "upvotes": " View 1 Upvoter",
            "upvoters": [
                {
                    "user_id": "Kulawat Pom Wongsaroj",
                    "user_href": "/profile/Kulawat-Pom-Wongsaroj"
                }
            ]
        }
    ]
}