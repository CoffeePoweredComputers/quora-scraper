{
    "title": "How can an algorithm help in making an efficient program? - Quora",
    "tags": [
        "Efficiency (time management)",
        "Algorithms"
    ],
    "response": [
        {
            "author_info": {
                "name": "Steve Baker",
                "href": "/profile/Steve-Baker-100"
            },
            "answer_text": "The choice of algorithm is critical\u2026and in daily life - not just programming. Suppose you have a deck of 52 playing cards and you need to put them together in order? One very simple algorithm would be to toss the entire pile of cards into the air - scoop them all into a pile and look to see if the pile is in the right order? Do this over and over again until by pure blind chance - it comes out in the right order. This is an insanely inefficient algorithm\u2026it would take longer than the life of the universe to get the cards to come out in order by chance alone. But we don\u2019t do that - there are plenty of more efficient ways to do it. So you could have a grid laid out on the table of 4 rows and 13 squares for each row. Now you could take each card off the deck in turn - and place it on the appropriate square - so just one quick pass through the deck and then pick them off of the table in order. Clearly then - for a human, sorting cards, there are better and worse algorithms. Well, it\u2019s the same for a computer program. It\u2019s perfectly possible for two programmers to write code to do the same exact thing - and if one of them has a better algorithm than the other, it can go VASTLY faster than the other. ",
            "date": "Updated October 27, 2020",
            "views": "627",
            "upvotes": " View 6 Upvoters",
            "upvoters": [
                {
                    "user_id": "Fahad Taj",
                    "user_href": "/profile/Fahad-Taj"
                },
                {
                    "user_id": "Sherif Magdy",
                    "user_href": "/profile/Sherif-Magdy-32"
                },
                {
                    "user_id": "Zaid Barends",
                    "user_href": "/profile/Zaid-Barends"
                },
                {
                    "user_id": "Adarsh Shankar",
                    "user_href": "/profile/Adarsh-Shankar-10"
                },
                {
                    "user_id": "Candida Frith-Macdonald",
                    "user_href": "/profile/Candida-Frith-Macdonald"
                },
                {
                    "user_id": "Charlie Richmond",
                    "user_href": "/profile/Charlie-Richmond-5"
                }
            ]
        },
        {
            "author_info": {
                "name": "Tony Li",
                "href": "/profile/Tony-Li-19"
            },
            "answer_text": "Efficient algorithms help a program be efficient. If you choose an inefficient algorithm, you get an inefficient program. It\u2019s that simple. Simple examples from real life: A simple system kept data in a linked list. The average search time was, of course . That was fine when n was 10, but as the system grew, it became 1,000 and then 100,000 and then there was a Really Big Problem. Replace the linked list with a balanced binary tree and there\u2019s no longer a problem. ",
            "date": "Answered September 10, 2016",
            "views": "15",
            "upvotes": " View 10 Upvoters",
            "upvoters": [
                {
                    "user_id": "Pavel Drot\u00e1r",
                    "user_href": "/profile/Pavel-Drot\u00e1r-1"
                },
                {
                    "user_id": "Don Shiner",
                    "user_href": "/profile/Don-Shiner"
                },
                {
                    "user_id": "Hans Liss",
                    "user_href": "/profile/Hans-Liss"
                },
                {
                    "user_id": "\u00c1rp\u00e1d Sz\u00e1sz",
                    "user_href": "/profile/\u00c1rp\u00e1d-Sz\u00e1sz"
                },
                {
                    "user_id": "Greg Kemnitz",
                    "user_href": "/profile/Greg-Kemnitz"
                },
                {
                    "user_id": "Scott Helms",
                    "user_href": "/profile/Scott-Helms-8"
                },
                {
                    "user_id": "Erik Fair",
                    "user_href": "/profile/Erik-Fair"
                },
                {
                    "user_id": "Lee Painton",
                    "user_href": "/profile/Lee-Painton"
                },
                {
                    "user_id": "Miguel Paraz",
                    "user_href": "/profile/Miguel-Paraz"
                },
                {
                    "user_id": "Ravjit Singh",
                    "user_href": "/profile/Ravjit-Singh-1"
                }
            ]
        },
        {
            "author_info": {
                "name": "Hans Liss",
                "href": "/profile/Hans-Liss"
            },
            "answer_text": "No matter how you do it, your program will always use algorithms and data structures, even if you just muddle through the programming process with minimal knowledge of what you\u2019re doing. It\u2019s just that the algorithms you produce are likely to be inefficient, or unpredictable for different types of input data. Knowing a number of good, tested algorithms and data structures beforehand, as well as their behaviour in different circumstances, makes it easier to decide on a suitably efficient one for your particular situation. ",
            "date": "Answered August 31, 2020",
            "views": "414",
            "upvotes": "0"
        }
    ]
}