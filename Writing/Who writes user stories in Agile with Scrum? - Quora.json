{
    "title": "Who writes user stories in Agile with Scrum? - Quora",
    "tags": [
        "Agile Operations"
    ],
    "response": [
        {
            "author_info": {
                "name": "Matthieu Cornillon",
                "href": "/profile/Matthieu-Cornillon"
            },
            "answer_text": "Short version: The Product Owner is responsible for the backlog. If all else fails, they must write the stories. However, I believe this should be a last resort; instead, I strongly recommend that teams strive to create stories collaboratively.  Long version: What is a story, anyway? As noted above, it is not requirements. A popular definition I've heard and used is \"a placeholder for a conversation\". This recognizes that the story cannot capture it all, and leaves it to someone (I'll get to who) to have a richer conversation to flesh out the details.  One limitation of this definition, though, is that it suggests only a future-facing perspective. It seems to say \"a story is a reminder to have a conversation in the future,\" but it doesn't say much about what happens after that conversation. This occurred to me after a colleague told me about a point Jeff Patton made at Agile Day '15.  (I'll do my own version and apologize to Mr. Patton in case I butcher his point!)  Imagine I show you a photo of a woman and a toddler on a bed with an open book in front of them.  To you, the picture communicates only what you can see from the camera's perspective in that single moment.  You might describe what you see: the woman and girl's appearance, the pattern on the bedspread, a few words in the large-print book.  You might describe the action of the scene: a woman and girl talking about a book they are reading.  You might even infer a mood from the two faces.  Contrast that with what the photo does for me.  It is my sister reading to my two-year-old daughter.  You can't see much from the background, but I can see right away that it was taken in my grandparents' house, on their bed.  I am reminded that this was the first time that my sister and daughter had spent time together in a while, and it warms me to think of this moment of their bonding.  I am reminded that the book they are reading was handed down to me by my father.  I remember that it was summer, and I can almost feel the humid heat that comes in that time of the year.  I also remember it was a great relief for my sister to watch my daughter, as it gave my wife and I time to do some much-needed work on the house.  What is striking here is not just the difference between my and your experience of the photo, but the fact that I am reminded of these things by the photo.  If you asked me about the visit, I might have told you some of these things, but this photo sparks my memory of many specific things tied to the moment of the photo that I otherwise would not have remembered. Now, imagine a user story.  You have two options.  In the first, a product owner writes the story, perhaps with a technical lead.  She shows it to the team.  They can only derive from it whatever is communicated by the text.  Stripped of context, even slightly unclear wording can yield wildly varied interpretations.  Contrast this with a second option, where the whole team has a discussion, at the end of which they write down a story.  In this second option, the user story can be a touchstone for the team, reminding them of the rich nuance of the conversation, just as that picture reanimates my memory of a moment more than three years ago for me.  The words on the card carry less of the burden, as the memory of the context will fill in the blanks and correct most confusion.  People will be reminded not only of what the team concluded, but why they did so.  They will remember not only what they are planning to build, but why this is the right thing for the user, who they will remember talking about in their conversation. This is where I would embellish the definition (and tarnish it through verbosity, I'm afraid): \"a story is both a placeholder for a conversation and a memento of that conversation's rich detail\".  Both the future- and past-facing aspects of that definition suggest involvement by the whole team. There's another reason that suggests full-team involvement.  Pete Behrens introduced to me the distinction between negotiable stories and solution stories.  A solution story tells you what to build.  It might give you some context, but it pretty much just says \"do this\".  A negotiable story, on the other hand, leaves things much more loosely defined.  It focuses on the problem you are trying to solve, the reason why you are doing anything at all, rather than the specific solution you are being asked to implement.  Eventually, you will want to nail down some specifics, and you might even convert your negotiable story to a solution story.  However, if you start by discussing a negotiable story with the whole team, you get several benefits.  First is deeper understanding of context, the problem at hand, the reason to do anything at all.  No matter what happens next, the team has that informing the many decisions they will have to make as they move forward.  Second, it leaves the door open for new ideas to emerge from the team.  Instead of betting that the Product Owner can come up with the best solution, you engage the team's creativity, and give new ideas the chance to emerge.  (Also, remember that this isn't just about polling more individuals for ideas; it's about letting ideas evolve through the discussion, taking a raw kernel and developing it through what it sparks for others.)  Third, it gives the team a feeling of involvement in what they are doing, which is always good.  You just don't get these benefits if you skip the part where the team considers a negotiable story. If it's such a good idea to have teams involved, why doesn't everyone do it this way?  Well, first of all, I could be full of baloney with all of this.  But even if you think what I say makes sense, you will see people hesitant to spend this much time.  People are worried that it is just another meeting instead of \"real work\", and the enormous benefits of full-team involvement are counter-intuitive and somewhat intangible.  It will take some convincing to get people to give it a try.  But in my mind, it's an easy call because it's a sure thing.  The team builds better software, they enjoy work more, and they do it faster (yes, even counting the meeting, because the team familiarity with the story greases the wheels at countless points down the line). At the very least, give it a try for a few sprints.  If you are struggling with it, make sure you understand why before discarding the method.  Is your Product Owner really letting go of the solution and creating space for innovation to emerge?  Is the meeting facilitated such that everyone has a voice?  Are people using that voice, or sitting quietly through the meetings head down in laptops or phones?  Are you really working to understand the user?  To understand what problem you are trying to solve? Good luck! ",
            "date": "Answered January 28, 2016",
            "views": "124",
            "upvotes": " View 14 Upvoters",
            "upvoters": [
                {
                    "user_id": "Cliff Gilley",
                    "user_href": "/profile/Cliff-Gilley"
                },
                {
                    "user_id": "Dmitry Misyuga",
                    "user_href": "/profile/Dmitry-Misyuga"
                },
                {
                    "user_id": "Ziad Goldman",
                    "user_href": "/profile/Ziad-Goldman"
                },
                {
                    "user_id": "Tracy Randle",
                    "user_href": "/profile/Tracy-Randle"
                },
                {
                    "user_id": "Andria Arapovi\u0107",
                    "user_href": "/profile/Andria-Arapovi\u0107"
                },
                {
                    "user_id": "Giuseppe Caruso",
                    "user_href": "/profile/Giuseppe-Caruso"
                },
                {
                    "user_id": "Hannah Valbonesi",
                    "user_href": "/profile/Hannah-Valbonesi"
                },
                {
                    "user_id": "Paul Jackson",
                    "user_href": "/profile/Paul-Jackson-44"
                },
                {
                    "user_id": "B vd Berg",
                    "user_href": "/profile/B-vd-Berg"
                },
                {
                    "user_id": "Don Hussey",
                    "user_href": "/profile/Don-Hussey"
                }
            ]
        },
        {
            "author_info": {
                "name": "Matt O'Toole",
                "href": "/profile/Matt-OToole-11"
            },
            "answer_text": "A: The PO (Product Owner). Just had this debate again with one of our engineers in a retro this week. He wanted me as a PO to write the bigger picture user story and then let him break it down into User Stories, as I \u2018didn\u2019t have a full picture of the codebase\u2019. TBF to myself, I\u2019m a self-taught coder and PO (almost a unicorn \ud83e\udd84- getting there \ud83d\ude00) and I know enough about our tech stack, our code base and general programming principles to know how to write them atomically and follow the INVEST principle. From my experience, having engineers write their own user stories is a recipe for an unmanageable mess. Yes, it can create a potential bottleneck to have 1 or 2 people write USs, but if you don\u2019t do that, you get: DuplicatesNo structure to how they\u2019re written as now there\u2019s no one standard \u2014 people write short descriptions, no descriptions, no titles, short titles, misleading titles, etc.Missing cards \u2014 \u201cwell, I was kind of doing that work on this card really\u2026.\u201dA training/oversight overhead as now I have to train engineers on how they should be written \u2014 it\u2019s even worse when you open it up to Customer Services and management as our CEO will just dump email threads into cards and expect everyone to read it and our CSMs create a lot of dupes because they don\u2019t necessarily know what bugs/issues/stories have already been logged by me as PO, our CTO or our QA.It can be more time consuming as now I have to monitor all the other stories going into JIRA, correct, edit, update, add more details, etc.Sprints can go out of the window as they\u2019ll then start working on cards in the backlog so there go your velocity and burn up reports. Good luck with your sprint planning.Scrums too aren\u2019t as straightforward \u2014 \u201cThere\u2019s no card to show what you were working on yesterday.\u201d \u201cAh, yeah, well, I didn\u2019t get a chance to create one, but I did start work on it\u2026.\u201d \ud83d\ude44Engineers don\u2019t like writing cards, in my xp. \u201cThis card says it\u2019s still in Todo\u2026\u201d \u201cOh, yeah, that\u2019s now in testing.\u201d \ud83e\udd26\ud83c\udffc\u200d\u2642\ufe0fUnintelligible cards \u2014 it might make sense to an engineer but when if there\u2019s no detail, can a QA understand what they need to do or can a PO sign it off?Just create user stories based around the UX. Have technical meetings, if some of them require a discussion on technical approach to solving an issue, then estimate, plan, implement, monitor, review\u2026 [repeat]. ",
            "date": "Answered January 21, 2020",
            "views": "863",
            "upvotes": "0"
        }
    ]
}