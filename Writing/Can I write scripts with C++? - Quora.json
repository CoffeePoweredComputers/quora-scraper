{
    "title": "Can I write scripts with C++? - Quora",
    "tags": [
        "Screenwriting",
        "C++ (programming language)",
        "Writing",
        "Programming Languages"
    ],
    "response": [
        {
            "author_info": {
                "name": "Michelle Shaw",
                "href": "/profile/Michelle-Shaw-3"
            },
            "answer_text": "Since a script generally denotes a piece of code that is executed in an interpreter, and C++ is a compiled language that must be turned into a binary executable before it is executed, the short answer to your question is \u201cno\u201d. For greater clarity, an interpreter parses the code at runtime. So, you end up paying a price in terms of runtime performance because the interpreter has to decide how to understand each line every time it executes. Generally, compiled languages have stricter typing and semantics rules than an interpreter will have. This makes for a faster, more predictable execution, but also a fussier experience with the compiler in terms of warnings and errors (interpreters tend to be noisier at runtime with error messages). A compiler incurs the cost of \u201cinterpreting\u201d (assigning meaning) to your source code once, and generates a binary that will work in a known set of possible environments. Put the resulting binary executable on a machine that isn't the right environment, and things tend to fail. BASICally (pun intended) an interpreter combines compilation and runtime activities together and forces you to live with the fact that it\u2019s going to incur the cost of interpreting the code _every_ time it executes. You get portability at the price of always having to hand out source. Just to muddy the waters, we have environments like Java and Microsoft\u2019s C# which compile to a byte code format for their respective logical processors (Java calls theirs the \u201cJava VM\u201d and Microsoft calls theirs \u201cCommon Language Runtime (CLR)\u201d. These environments are semi-compiled. The byte code generated by the compiler still has to be interpreted at runtime, but it is nowhere near as heavy as the full parse-interpret cycle you would see in a scripting language like Perl or Python. The (theoretical) gain here is that developers get \u201cbinary compatibility\u201d across platforms without having to worry about recompiling everything. ",
            "date": "Answered June 26, 2017",
            "views": "474",
            "upvotes": " View 2 Upvoters",
            "upvoters": [
                {
                    "user_id": "Nick Thompson",
                    "user_href": "/profile/Nick-Thompson-152"
                },
                {
                    "user_id": "Andrew Lewis",
                    "user_href": "/profile/Andrew-Lewis-215"
                }
            ]
        }
    ]
}