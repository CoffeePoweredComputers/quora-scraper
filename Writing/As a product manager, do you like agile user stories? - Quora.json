{
    "title": "As a product manager, do you like agile user stories? - Quora",
    "tags": [
        "User Stories",
        "Agile Software Development",
        "Product Managers"
    ],
    "response": [
        {
            "author_info": {
                "name": "Andrea Saez",
                "href": "/profile/Andrea-Saez-1"
            },
            "answer_text": "I don\u2019t think anyone necessarily likes writing user stories, but they are definitely helpful. You might hate them (everyone does), but they\u2019re here for a reason. A good user story distills down the problem a user is trying to solve to the following question: What does the user want to achieve? What is their motivation? A spec tells you what an idea or feature should look like. A good user story tells you what\u2019s motivating the user and what problem they want to solve. If a spec tells you to make a button blue, the user story will tell you what that\u2019s meant to help the user do. What does the user want to see after you click on the button? Where do they go? What happens for different types of users or users with different permissions? User stories force you to think from your user\u2019s POV, and that\u2019s a good thing. When you spend all day working on your product, it\u2019s hard to imagine how your customers interact with your product. Certainly not with as much finesse as the ones building it! You have to dumb yourself down a little bit. User stories are useful to everyone, but especially for devs, who often execute releases without knowing why or who they\u2019re even building for. Shouldn\u2019t the people who are actually building the product be working with more than just a laundry list of tasks? The 3 Elements of a Great User Story The good news is you don\u2019t have to make your user stories from scratch. Weed through customer feedback and user personas to help you slip into your customers\u2019 shoes. You probably already have them sitting around, so refer back to them early and often. Title Well, you do want to name it something, don\u2019t you? User Story The key is to impart this information: What is the user doing?What does the user want to achieve?Why do they want to achieve this?This is the most popular format, but you don\u2019t necessarily have to stick to it: As a user, I want to x In order to y. The goal is to communicate the context around what you want built so that devs can make decisions about how to implement it. Acceptance criteria Acceptance criteria is how you judge whether the user story has been done. Often it is just a bulleted list of things like \u201cUser can see x\u201d or \u201cUser can enter y.\u201d Essentially the acceptance criteria allows someone to come along, test and confirm whether the user story is working as expected. Who writes user stories? In Agile methodology the person writing the user stories is usually the product owner. If you have a PO, great! Otherwise it often ends up being devs (or lead dev) breaking down an epic, project manager or product manager. UX teams are sometimes responsible for user stories too, but not as often. But they\u2019re not the only ones who can (or should) write user stories. Everyone\u2019s invited to this party! It\u2019s unlikely you\u2019ll get marketing, sales or customer support interested in writing user stories on their own, but see if they\u2019ll join you for a user stories session that you lead. They talk to your customers all day long and if you prod them enough, they could bring up considerations you wouldn\u2019t have thought yourself. Each team brings its own perspectives, and getting them involved will help you and your dev team tighten the final design of your product. User stories \u2013 can\u2019t live with \u2018em, can\u2019t build an awesome product without \u2018em! ",
            "date": "Answered June 7, 2016",
            "views": "15",
            "upvotes": " View 8 Upvoters",
            "upvoters": [
                {
                    "user_id": "'lamide TAIWO",
                    "user_href": "/profile/lamide-TAIWO"
                },
                {
                    "user_id": "Fleur Hosken",
                    "user_href": "/profile/Fleur-Hosken"
                },
                {
                    "user_id": "Pat Nowlan",
                    "user_href": "/profile/Pat-Nowlan"
                },
                {
                    "user_id": "Asim Shakour",
                    "user_href": "/profile/Asim-Shakour"
                },
                {
                    "user_id": "Mike Wright",
                    "user_href": "/profile/Mike-Wright-72"
                },
                {
                    "user_id": "Lewis Broad-Ashman",
                    "user_href": "/profile/Lewis-Broad-Ashman"
                },
                {
                    "user_id": "Kalpit Seksaria",
                    "user_href": "/profile/Kalpit-Seksaria"
                },
                {
                    "user_id": "Vivek Anand",
                    "user_href": "/profile/Vivek-Anand-50"
                }
            ]
        },
        {
            "author_info": {
                "name": "Kavit Dholakia",
                "href": "/profile/Kavit-Dholakia"
            },
            "answer_text": "Product Manager's job is to innovate, design, build, launch and run the product. During this whole process, Product Manager has to collaborate with the business and engineering team and come up with the Product Vision, Product Roadmap and Product Requirements.  I like User stories mainly because: 1) Helps breakdown Vision/Roadmap/High level Requirements: User stories are a great way of breaking down the high level requirements into detailed requirements that communicate business requirements to the developer.   2) Helps define MVP (Minimum Viable Product): One of the important concept of Agile is to help the stakeholders priortize requirements and develop in an iterative manner. I personally like User stories because I can break down product vision/high level business requirements into detailed requirements and I can identify and prioritize user stories that need to be developed in each iteration. I personally create a backlog of user stories and then define MVP (Minimum Viable Product) by identifying user stories that should be developed to launch MVP. It just helps me to stay on track of the requirements and communicate with the business users.  3) Helps team Collaborate and Track Development: During iteration, user stories go through different stages of SDLC (Software Development Life Cycle) which means the user stories will have different owners through each iteration. For example, once the development work of a story is completed, that story can be assigned to QA and let's say if QA finds any bug then the story can be assigned  back to developer to fix it.   However, there are some disadvantages to writing user stories. Some disadvantages are:   1) User Stories are not well defined: The user stories should always be user centric but at the same time it should have the information that developer needs to code. Often I have seen developers complain that they do not have enough information in user stories because they are way too much business centric.  2) Difficult to explain UI heavy requirements in stories:  If the requirements are very UI and design heavy, then it is important that wireframes or mockups are attached to the user story because it can be difficult to explain the design/UI through just few lines of text in the user stories.   3) User stories can \"fall through the cracks\": If the teams do not tightly collaborate then user stories  can end up lost or not being part of the release. I have seen this happen when team members do not update the status of stories. Whether you use a scrum wall or Project Management tool like Mingle, Pivotal Tracker etc, it is important that some one is always keeping track of the stories. ",
            "date": "Answered September 21, 2015",
            "views": "645",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Cameron Roe",
                "href": "/profile/Cameron-Roe"
            },
            "answer_text": "Yes! User stories are great because they bring the \u201cstory\u201d of the \u201cuser\u201d to the \u201cproduct\u201d and bring a real solution to life. The user stories for a PM will only be as effective as they are written. The PM needs to do one thing really well when they are writing user stories\u2026 Learn more in Writing Effective User Stories I.N.V.E.S.T. Using the INVEST acronym can help guide a PM to writing more effective User Stories. Independent A common software principle known as Separation of Concerns, refers to the isolation of problems or concerns that should be solved individually. This principle can also apply to a user story which highlights one particular feature closely and is kept independent. This isn\u2019t always possible in some websites or applications, but it should always be considered. Negotiable The point of running Agile is to keep flexibility an option. An effective User Story should be negotiable, allowing for collaboration between designers, developers, and product owners. Each team member will provide special insights that can help refine details throughout the lifecycle of a story. Valuable User Stories should be valuable to the User Persona they are targeting. If the story does not offer a valuable benefit after it\u2019s completion, it would not be considered effective to the User Persona or the Business Organization. Estimable When using effective User Stories, the team should be capable of estimating the effort it will take to achieve the scope of work. Clearly defined stories, that are sized appropriately help to improve their estimate feasibility. Small User Stories should be sized appropriately which allows for clarity, portability, and team consumption. You wouldn\u2019t build an entire wall at at once - lay one brick at a time. Testable User Stories should be worded in such a way that allows for testability. Clearly identify how the User Story will be tested using verbs and present participles like: Should hide modal window when clicking the modal\u2019s close buttonYou don\u2019t always need to like something to be effective with using it. Make I.N.V.E.S.T.ments in your user stories and your users will make investments in your product. :-) Learn more in Writing Effective User Stories ",
            "date": "Answered November 8, 2018",
            "views": "162",
            "upvotes": "0"
        },
        {
            "author_info": {
                "name": "Marc Abraham",
                "href": "/profile/Marc-Abraham"
            },
            "answer_text": "Yes, agile user stories provide a simple but effective format when thinking about the expected behaviour and outcomes of a product or feature that you're trying to build. These are the main things that I've learned over the years when it comes to writing effective user stories:  'So what!?' - Too often I come across users stories which end by stating something like \"the user clicks on the 'next' button'\" and I always end up thinking \"so what!?\". I therefore believe it's important to focus on the desired outcome of the user story. For example, \"When I click on the 'next' button, Then I will be able see all recommendations available.\" This kind of expected user behaviour can be tested easily.Scenarios - There is always a risk of ending up with a lot of user stories. I've found it helpful in terms of clarity - both for me and the team - to group user stories. You can do this based on functionality (e.g. all user stories related to search) or based on specific scenarios (e.g. user wants to upgrade his account).Don't write user stories in isolation - I have seen a number of cases where the product manager would write a bunch of user stories and then throw them over the wall to developers or designers to let them figure it. I very much see user story writing as a collaborative process. Ideally, I will draft a user story with a QA and then refine things with the developer who is going to work on the story. In rare cases where I do end up writing a user story in isolation I will talk a developer through the story and answer any questions before he/she starts doing any work on the story in question.Assumptions, assumptions - As Alan Klement mentioned in his answer, please don't forget that user stories are largely based on assumptions. Where possible, I try to ground my user stories in as much 'validated' data as possible or at least do a high level story mapping exercise to make sure that everyone involved understand the user flow and the assumptions that we're making (see Jeff Patton's story mapping).",
            "date": "Answered April 10, 2014",
            "views": "13",
            "upvotes": " View 6 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Fredrik Holmberg",
                    "user_href": "/profile/Fredrik-Holmberg-5"
                },
                {
                    "user_id": "Ian Corbin",
                    "user_href": "/profile/Ian-Corbin"
                },
                {
                    "user_id": "Peter Feytser",
                    "user_href": "/profile/Peter-Feytser"
                },
                {
                    "user_id": "Matt Brooks",
                    "user_href": "/profile/Matt-Brooks-15"
                },
                {
                    "user_id": "Murray Robinson",
                    "user_href": "/profile/Murray-Robinson"
                },
                {
                    "user_id": "Orian Breaux",
                    "user_href": "/profile/Orian-Breaux"
                }
            ]
        },
        {
            "author_info": {
                "name": "Lars Trieloff",
                "href": "/profile/Lars-Trieloff"
            },
            "answer_text": "Agile user stories, are a tool for communicating requirements between product management teams and engineering teams. Like all tools, its merits can be evaluated against alternatives.The most common and well-known alternative are requirements in the form of \"the system should \u2026\", which come with a large set of problems: They are system-centric, not user centricThey don't describe the problem, but prescribe the solutionThey lack contextIn short, while traditional requirements are a tool, like a nail gun, you can quickly end up in a situation like this:  The proposed alternative, in the form of agile \"As a persona, I want desire, so that benefit\". This was clearly intended as a safety precaution to prevent overly prescriptive specifications and communicate requirements in a way that is not prescribing the solution. And in fact, they are moderately safe, just like this alternative to a nail gun:  Unfortunately, as Alan Klement has pointed out, agile user stories make a lot of dangerous assumptions: Persona assumption: relying largely on persona folklore, instead of the current situation of the user, personas are a weak way to encapsulate the needs and desires of the user and can serve only in a limited way to create empathy for the user.Desire assumption: \"I want \u2026\" leaves very little room for interpretation and while it does not prescribe a specific implementation, it does prescribe a specific user flow, which is often sub-optimal.Additionally, user stories often fail to address the core of the requirement: The expected benefit, is often omitted and unspecific, so that no statement can be made, based on the user story, about the desired state the user wants to be in.It does not describe end results and interactions with other systems, leading to such crude workarounds like introducing \"the system\" as a persona.Like the hammer above, the user story manages to retain the form, but not the function. They are hardly an effective tool to get the job done and unnecessarily complicate the communication between product managers and developers. Paraphrasing Leo McGinneva, you don't want a hammer, you want a nail in the wall. As a product manager you want to communicate your knowledge about market and customer problems effectively, and as a developer you want to understand what the problem is. I've been successful in using a combination of three things: For well-established problems, with well established solution patterns and a high degree of trust between product and engineering teams: use simple feature descriptions like \"Forgot password functionality\". This works well in areas where you just want to follow an established path and do not seek differentiation.For novel problems, and in teams with a low degree of trust between product and engineering, I've been using more elaborate requirements documentation with a heavy focus (multi-paragraph) on describing the user and their business problem. This can only serve as a temporary solution until more trust is established between product and engineering. If you use this as a long-term solution, these requirements can be seen as 'contracts' by engineering, leading you to discuss the document instead of the customer problem and solution.For novel problems, and with established trust, I am relying on Job Stories, derived from the Jobs-to-be-Done innovation framework. The job story pattern is \"When situation, I want to motivation, so I can expected outcome\". As described in the blog post Replacing The User Story With The Job Story, the heavy focus on situation, motivation and expected outcome helps to communicate the problem without prescribing an implementation. ",
            "date": "Answered March 31, 2014",
            "views": "35",
            "upvotes": " View 13 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Tom Saltsman",
                    "user_href": "/profile/Tom-Saltsman-2"
                },
                {
                    "user_id": "Michal Naka",
                    "user_href": "/profile/Michal-Naka"
                },
                {
                    "user_id": "Hans Sponberg",
                    "user_href": "/profile/Hans-Sponberg"
                },
                {
                    "user_id": "Adam Chavez",
                    "user_href": "/profile/Adam-Chavez"
                },
                {
                    "user_id": "Samuel Chan",
                    "user_href": "/profile/Samuel-Chan-1"
                },
                {
                    "user_id": "Chester John",
                    "user_href": "/profile/Chester-John-2"
                },
                {
                    "user_id": "Andreas Holmer",
                    "user_href": "/profile/Andreas-Holmer"
                },
                {
                    "user_id": "Floris Hoppe",
                    "user_href": "/profile/Floris-Hoppe"
                },
                {
                    "user_id": "Ollie Glass",
                    "user_href": "/profile/Ollie-Glass"
                },
                {
                    "user_id": "Chuck Blevins",
                    "user_href": "/profile/Chuck-Blevins"
                },
                {
                    "user_id": "Tom Be",
                    "user_href": "/profile/Tom-Be"
                },
                {
                    "user_id": "Adrian Spinei",
                    "user_href": "/profile/Adrian-Spinei"
                },
                {
                    "user_id": "Alan Klement",
                    "user_href": "/profile/Alan-Klement"
                }
            ]
        },
        {
            "author_info": {
                "name": "Sandeep De",
                "href": "/profile/Sandeep-De-1"
            },
            "answer_text": "User stories are a place holder. A vehicle for attaching development effort estimates. A means to prioritize against other demands / limited time and resources to satisfy them. The beginning of many conversations.  They're not the end point to actually developing a superlative user experience. They don't take the developed product/feature back to out to the market / customers to validate development efforts and ensure things do what they say on the tin.  They help to define the overall business objective/problem to be solved and give a common language for people to understand the issue and organize collaboration. Writing a great user story doesn't mean that you've automatically creating a great product/feature. Or that the field will know how to use it. People try to turn user stories into more heavyweight requirements when developers aren't used to the iterative figure it out as you go process / come from waterfall backgrounds / don't want to roll up their sleeves. PMs who don't want to go beyond the user story typically don't understand that it's just the start of a conversation and iterations are necessary between dev, design, the market, other business stakeholders.  In practice you find that people who think user stories are the be all and end all as well as those who criticize the tool - neither of them really know what they're talking about. I mean in the sense of understanding or properly applying the tool. Typically critics come from client facing project management backgrounds where getting sign off at different milestone stages or providing detailed documentation is part of their thinking and it is incomprehensible how any work could skate by on less. Those who overestimate user stories tend to be new to agile. ",
            "date": "Answered March 31, 2014",
            "views": "804",
            "upvotes": " View 2 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Srinivas Vemula",
                    "user_href": "/profile/Srinivas-Vemula"
                },
                {
                    "user_id": "Harish Agrawal",
                    "user_href": "/profile/Harish-Agrawal"
                }
            ]
        },
        {
            "author_info": {
                "name": "Lewis C. Lin \ud83e\udd8a",
                "href": "/profile/Lewis-C-Lin"
            },
            "answer_text": " Thanks Matt Brooks for the chance to answer! Everyone so far has had very thoughtful answers, so I'll just add my two cents: I'm a fan of Agile user stories when they're done well. As a backlog owner, I go \"aaargh\" when I see stories that read: \"Build a purple button\" -- ack, who is it for, and why do we need it?\"Build a supercalifragilisticexpialidocious flux particle gizmo accelerator\" -- huh, I don't even know what you're talking aboutOne would think the user story template is straightforward (User story template), but I've been in countless organizations where we need to schedule a meeting every quarter on \"How to Write a Complete User Story\" session. I do agree with Tim Frietas that most user stories lack visual attachments such as UI mockups or product screenshots that would make it easier to grok what's being requested in the user story, especially fro front-end features. Lewis LinAuthor of Decode and Conquer: Answers to Product Management Interviews Photo Credit: Annie Belle ",
            "date": "Answered April 2, 2014",
            "views": "12",
            "upvotes": " View 4 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Srividya Rangarajan",
                    "user_href": "/profile/Srividya-Rangarajan-1"
                },
                {
                    "user_id": "Marc Abraham",
                    "user_href": "/profile/Marc-Abraham"
                },
                {
                    "user_id": "Matt Brooks",
                    "user_href": "/profile/Matt-Brooks-15"
                },
                {
                    "user_id": "Tim Frietas",
                    "user_href": "/profile/Tim-Frietas"
                }
            ]
        },
        {
            "author_info": {
                "name": "Tim Frietas",
                "href": "/profile/Tim-Frietas"
            },
            "answer_text": "The quote about democracy being a bad form of government but the best one we have comes to mind.  I don't love user stories. The best teams I've worked on were full of devs who knew the product and built from the UI mockups, which were iterated on with a designer who also knew the product--and we all sat twenty feet apart. So, consider this a soapbox that proximity and engagement is the best substitute for process.  However, in the case you're providing direction to a team not immediately in your organization or you are working with a remote team, user stories can be useful as a way of at least installing some sense of how a product should behave, which is important if your engineering team isn't proactively user-focused, or primarily focused on your product. It gives them an anchor that they can't stray too far from without being able to say, \"Hey, this doesn't do what users wanted!\" ",
            "date": "Answered March 31, 2014",
            "views": "515",
            "upvotes": " View 1 Upvoter ",
            "upvoters": [
                {
                    "user_id": "Matt Brooks",
                    "user_href": "/profile/Matt-Brooks-15"
                }
            ]
        },
        {
            "author_info": {
                "name": "Pranav Desai",
                "href": "/profile/Pranav-Desai"
            },
            "answer_text": "Yes.  Especially because they do foster a lot of conversation between me and my team as they seem very actionable (if written right) and small enough where going through them is not an arduous task (less procrastination) and if you do create small independent stories you reduce some of the inherent risk (since the scope is smaller at a story level) Since each team does Agile in their own special way, we have adopted a model where for certain stories we also include low fidelity mockups and give everyone an overview of why this is important to a user or what a user is trying to accomplish. Again this is used for further conversations. ",
            "date": "Answered April 2, 2014",
            "views": "429",
            "upvotes": " View 1 Upvoter",
            "upvoters": [
                {
                    "user_id": "Matt Brooks",
                    "user_href": "/profile/Matt-Brooks-15"
                }
            ]
        },
        {
            "author_info": {
                "name": "Cliff Gilley",
                "href": "/profile/Cliff-Gilley"
            },
            "answer_text": "Yes, I think that they are, in general, far superior to other forms of requirements that I've used in my 10+ years working as a product manager. The only caveat I have is that they are only useful when they are used correctly, which is as light documentation that describes the user, the task, and the goal, leaving other details up to the necessary follow on conversations between development, product management, and other stakeholders. ",
            "date": "Answered March 30, 2014",
            "views": "18",
            "upvotes": " View 11 Upvoters",
            "upvoters": [
                {
                    "user_id": "Jeff Rogers",
                    "user_href": "/profile/Jeff-Rogers"
                },
                {
                    "user_id": "Abhishek Singh",
                    "user_href": "/profile/Abhishek-Singh-1005"
                },
                {
                    "user_id": "John Peltier",
                    "user_href": "/profile/John-Peltier"
                },
                {
                    "user_id": "Dov Bigio",
                    "user_href": "/profile/Dov-Bigio"
                },
                {
                    "user_id": "Darren Cho",
                    "user_href": "/profile/Darren-Cho"
                },
                {
                    "user_id": "Marc Abraham",
                    "user_href": "/profile/Marc-Abraham"
                },
                {
                    "user_id": "Michael Duxbury",
                    "user_href": "/profile/Michael-Duxbury"
                },
                {
                    "user_id": "Pranav Desai",
                    "user_href": "/profile/Pranav-Desai"
                },
                {
                    "user_id": "John Vajda",
                    "user_href": "/profile/John-Vajda"
                },
                {
                    "user_id": "Miguel Paraz",
                    "user_href": "/profile/Miguel-Paraz"
                },
                {
                    "user_id": "Rich Mironov",
                    "user_href": "/profile/Rich-Mironov"
                }
            ]
        },
        {
            "author_info": {
                "name": "Steve Johnson",
                "href": "/profile/Steve-Johnson-10"
            },
            "answer_text": "The user story format is only one of many \"formulas\" for writing requirements. The most common problem with the format is product owners tend to write features instead of problems. The approach I prefer is called job stories--these focus on the job or outcome the customer is trying to address. So instead of being about the feature, job stories tend to better explain the customer scenario.  These methods require competent developers. Developers who need to be told exactly what to build will not be happy with job stories--nor will they like agile much either. ",
            "date": "Answered March 30, 2014",
            "views": "1",
            "upvotes": " View 5 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Marc Abraham",
                    "user_href": "/profile/Marc-Abraham"
                },
                {
                    "user_id": "Bastien Gallay",
                    "user_href": "/profile/Bastien-Gallay"
                },
                {
                    "user_id": "Pranav Desai",
                    "user_href": "/profile/Pranav-Desai"
                },
                {
                    "user_id": "Lars Trieloff",
                    "user_href": "/profile/Lars-Trieloff"
                },
                {
                    "user_id": "Rich Mironov",
                    "user_href": "/profile/Rich-Mironov"
                }
            ]
        },
        {
            "author_info": {
                "name": "Gerry Claps",
                "href": "/profile/Gerry-Claps"
            },
            "answer_text": "Prioritizing user stories to help solve customers problems (i.e. job stories), is where user stories gain their power.   User stories focus on defining technical solutions and are great at doing that. However, implementing user stories without knowing what customers really want can lead to wasted software development. Using job stories, teams can define customers' situations and motivations. After you know what your customers want, you'll find that this want can be solved in multiple ways (i.e. multiple user stories can solve a job story). User stories 'execute' the 'strategy' and 'tactics' you define. ",
            "date": "Answered February 23, 2015",
            "views": "14",
            "upvotes": " View 5 Upvoters",
            "upvoters": [
                {
                    "user_id": "Sin Pang",
                    "user_href": "/profile/Sin-Pang-1"
                },
                {
                    "user_id": "Jowita Emberton",
                    "user_href": "/profile/Jowita-Emberton"
                },
                {
                    "user_id": "Scott Helms",
                    "user_href": "/profile/Scott-Helms-8"
                },
                {
                    "user_id": "S\u00f8ren Fuhr",
                    "user_href": "/profile/S\u00f8ren-Fuhr-2"
                },
                {
                    "user_id": "Tu\u1ea5n Ho\u00e0ng",
                    "user_href": "/profile/Tu\u1ea5n-Ho\u00e0ng"
                }
            ]
        },
        {
            "author_info": {
                "name": "Sriyansa Dash",
                "href": "/profile/Sriyansa-Dash"
            },
            "answer_text": "Not really. Primarily because drawing the line between:  When the user clicks save, the form data must be saved in the DB. and  When the user signs up, he should follow the signup checklist below is difficult. the first one is rather redundant and the second one too high level. Most importantly, it is very difficult to effectively communicate the overall philosophy/approach/theme via user stories. So the developers either never see the forest or just fight on how every tree is placed. ",
            "date": "Answered March 31, 2014",
            "views": "438",
            "upvotes": " View 1 Upvoter ",
            "upvoters": [
                {
                    "user_id": "Sayan Maiti",
                    "user_href": "/profile/Sayan-Maiti"
                }
            ]
        }
    ]
}