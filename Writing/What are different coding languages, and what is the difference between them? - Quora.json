{
    "title": "What are different coding languages, and what is the difference between them? - Quora",
    "tags": [
        "Learning to Program",
        "Programming Languages"
    ],
    "response": [
        {
            "author_info": {
                "name": "Alfe Berlin",
                "href": "/profile/Alfe-Berlin"
            },
            "answer_text": "Different computer languages are not like different natural languages. Natural languages have all more or less the same task: They are meant for communication between human beings, to help organize their everyday social life, to express feelings, needs, to offer things. To argue. Computer languages, on the other hand, are more like different tools. They have different features, some are meant for specific hardware, some for specific operating systems, some for specific tasks. HTML is for describing web pages. TeX is for describing scientific documents, Postscript is for describing printable pages. C is for programming microprocessors on a rather low level, when you need to manage the memory handling yourself. Java is for programming larger applications when you do not want to be bothered with such low-level stuff. Javascript is meant to be run in and provide content for a web page. Python is for expressing complex algorithms and therefore used widely in machine learning. Shell-scripting is for automating operating system related things like copying files and cleaning up disks. Special programming languages exist in many fields. Each of them has a specific field of expertise, but is on the other hand limited to exactly that field. To achieve stuff the language is not meant for often is considered a \u201chack\u201d. All this is human-computer communication. Another aspect which came up mostly in the last decades is the human-human communication. When earlier it was considered enough to write a program to make the computer understand and do the right thing, it now became more and more relevant to ensure that the developer who is supposed to maintain an existing program will be able to understand the program and the thoughts behind it. Several younger languages (e. g. Python, C#, Go) or newer versions of older languages (C++) were designed with this aspect in mind. Several languages can be found in nearly all fields (C/C++, Java), but often they are a poor choice. Many security leaks, for example, are because of badly programmed memory management done in C. In other languages that exploitable error could not have been made in the first place, so one could argue that (maybe) they should have been used instead. But C, on the other hand, is to close to the hardware that it is more or less the fastest solution one can get. Java, on the other hand, is in many cases chosen because it is now so widely used, well-supported, etc. but then turns out to be too slow, too unpredictable (e. g. because of the GC, the JIT, etc.) and too memory-hungry for an application which uses really many resources. If you are looking for a language to learn, ask yourself first: \u201cWhat do I want to achieve?\u201d What do you want to code? Signal processing? Games? Servers? Web front-ends? GUIs? Mobile apps? Washing machines? Automotive? Big data? Cloud computing? Operating systems? In what environment will I program? Windows? Linux? Mobile? Embedded? Is the focus more on development speed or on execution speed? How relevant is maintainability? And then choose the language. ",
            "date": "Updated November 28, 2019",
            "views": "36",
            "upvotes": " View 7 Upvoters",
            "upvoters": [
                {
                    "user_id": "Adam KH",
                    "user_href": "/profile/Adam-KH-6"
                },
                {
                    "user_id": "Carol Johnson",
                    "user_href": "/profile/Carol-Johnson-33"
                },
                {
                    "user_id": "Siya Marcus",
                    "user_href": "/profile/Siya-Marcus"
                },
                {
                    "user_id": "Yerin Park",
                    "user_href": "/profile/Yerin-Park-3"
                },
                {
                    "user_id": "Mandakhbayar Munkhorgil",
                    "user_href": "/profile/Mandakhbayar-Munkhorgil"
                },
                {
                    "user_id": "Aayush Sapkota",
                    "user_href": "/profile/Aayush-Sapkota-8"
                },
                {
                    "user_id": "Slippage",
                    "user_href": "/profile/Slippage-1"
                }
            ]
        },
        {
            "author_info": {
                "name": "Richard Kenneth Eng",
                "href": "/profile/Richard-Kenneth-Eng"
            },
            "answer_text": "The taxonomy of programming languages is very complex, far too big a subject to summarize on Quora. However, superficially I will mention just a few things\u2026 Programming languages can be roughly classified by programming paradigm, such procedural programming, object-oriented programming, functional programming, and logic programming. These paradigms are based on different principles regarding how programming solutions can be modelled and organized. Books have been written about this, so I shan\u2019t expand on this here. Programming languages can also be classified by how variables are typed, whether they\u2019re dynamically typed, or statically typed, or optionally typed, or so on. Data typing refers to what kind of data values a variable (or container) can hold in the course of program execution. Dynamic typing allows the container to hold different kinds of values at any time; static typing declares that the container can only hold values of a specific type. Programming languages don\u2019t even have to be text-based. Scratch is an example of a visual programming language, one that is presented to the user in graphical drag-and-drop form. Sometimes, how a programming language is implemented at the machine level can be a fundamental, intrinsic quality of the language. Examples of this include Java and Smalltalk which compile to bytecode that is executed in a language virtual machine. This compares to languages like C and Go that compile to native code. While these languages can be implemented in other ways, they are almost never done. ",
            "date": "Answered June 25, 2017",
            "views": "2",
            "upvotes": " View 3 Upvoters",
            "upvoters": [
                {
                    "user_id": "Harsh Dalal",
                    "user_href": "/profile/Harsh-Dalal-12"
                },
                {
                    "user_id": "Aykut Duru",
                    "user_href": "/profile/Aykut-Duru"
                },
                {
                    "user_id": "Richard Shu",
                    "user_href": "/profile/Richard-Shu-7"
                }
            ]
        }
    ]
}