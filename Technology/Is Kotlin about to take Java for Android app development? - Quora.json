{
    "title": "Is Kotlin about to take Java for Android app development? - Quora",
    "tags": [],
    "response": [
        {
            "author_info": {
                "name": "Damien Filiatrault",
                "href": "/profile/Damien-Filiatrault"
            },
            "answer_text": "The long-disputed Kotlin vs. Java debate for Android development struck my curiosity, so I sat down with senior developer Abdurahman Adilovic and had him weigh in on the matter. Here are the 5 main advantages he believes Kotlin has over Java (within the context of Android development). THE PROS OF KOTLIN VS JAVA DATA CLASSESIn simple terms, \u2018data classes\u2019 are containers for data. If you come from a Java background, you\u2019ll know how much code you have to write to get these set up. Say we are building an app that has two screens, initial authentication, and then a home screen with a \u2018social feed\u2019 style list of posts. For this, we\u2019d need a container for the \u2018User Object\u2019, as the social feed items: Picture, Video, and PhotoAlbum. If we were building this in Java, it would be a fairly involved process: First, we\u2019d have to define class fields,Then we would need a \u2018getter\u2019 and a \u2018setter\u2019 for each property,Lastly, we would employ \u2018equals\u2019 and \u2018hashCode\u2019 methods.A simple data class with few properties would easily reach dozens of lines of code. Kotlin replaces this excess with a data class: a perfect fit for our use case. data class User(val name: String, val email: String)data class Picture(val url: String)data class Video(val url: String)data class PhotoAlbum(val photos: List<Photo>) \u00a0That\u2019s it, in just 4 data classes and 4 lines of code! In fact, we can actually further condense this into just one Kotlin file. When we write a data class in Kotlin, \u2018getters\u2019, \u2018setters\u2019, \u2018equals\u2019 and \u2018hashCode\u2019 methods are automatically generated once this code is converted to JVM byte-code. That gives us the power to directly check if two objects are the same without writing the \u2018equals\u2019 method ourselves or maintaining it as the class changes. Even the PhotoAlbum class that contains a list of other objects can be compared using equals since Photo is a data class also. val photoAlbum1 = PhotoAlbum(listOf(Photo(\"www.google.com/image1\"))) val photoAlbum2 = PhotoAlbum(listOf(Photo(\"www.google.com/image1\"))) println(photoAlbum1 == photoAlbum2) \u00a0The result of this println() is \u2018true\u2019, because lists compare items by value, not by reference, and we have a data class as an item in the list. 2. CO-ROUTINES Java async execution on Android is not fun to do. You have to juggle managing the UI thread and a network call at the same time. There are two main ways to do this: Callbacks. These aren\u2019t pretty, and they don\u2019t allow a request to be canceled.rxJava. If you can get over the steep learning curve, rxJava does enable a request to be canceled but it has no callbacks.Kotlin\u2019s coroutines help us write async code in a blocking fashion. This way we can just focus on the data rather than how to fetch it. Coroutines are lightweight threads. They don\u2019t block the execution of the thread they work in, but they can suspend their own execution. 3. EXTENTION FUNCTIONS How many utility classes do you have in your Android project? And wouldn\u2019t it be great if - somehow - you could attach those functions directly to objects they work on? Let me explain. To show a \u2018toast\u2019 message in Android we need to specify the context, message, and duration of the toast. But all we typically care about is showing the message itself. So, wouldn\u2019t it be nice if we could somehow just pass a message to a function and magically get our \u2018toast\u2019 shown on the screen? Let\u2019s build that magic function. The Java style is to write a static utility function that can display a \u2018toast\u2019. One of the downsides of utility classes is that they have to be directly referenced from all over your code base. This directly couples your code with that utility class and, in turn, goes against SOLID principles of quality software. What if we could somehow attach a \u2018toast\u2019 method, with a better API, directly to the context class? You guessed it: Kotlin to the rescue! fun Context.toast(message: String, short: Boolean = true) {    val duration = if (short) Toast.LENGTH_SHORT else Toast.LENGTH_LONG    Toast.makeText(this, message, duration).show()} \u00a0To use our \u2018toast extension\u2019 function, we can simply write toast(message = \u201cwoow\u201d) in Activities or Fragments. This is much cleaner than a method call on a utility class. What Kotlin does, behind the scenes, is to create a utility function and injects it to the caller\u2019s site without you doing it manually. 4. NULL SAFE In Java Development there is a question of \u2018do you place null checks everywhere?\u2019 or \u2018do you leave your app susceptible to null pointer exceptions?\u2019 Personally, I like to treat all data that comes through a network as nullable, but I also don\u2019t want to put null checks everywhere. That\u2019s because I\u2019m only interested in the cases when data is not null \u2013 so I can then show that data. But how do you treat something as null, and still use it without null checks? You guessed it, Kotlin has some features that will help. Within Kotlin there is the concept of nullable and non-nullable variables. For non-nullable variables, you have to specify a value immediately upon creating an object (the exception is the late init var modifier). There is no way to have a null pointer exception and there is no need for null checks. The rule of thumb is this: If you know something may be null (such as data coming from a network call), use nullable variables to protect yourself from null pointer exception. 5. DATA SERIALIZATION What if you want to share objects between screens while developing an Android app? The recommended way is to utilize the Parcelable serialization provided in the Android platform, but to do this we would need to write custom code for each individual property to \u2018marshal\u2019 and \u2018unmarshal\u2019 it. Not to mention maintaining that code as the class changes. With Kotlin, all it takes is a single annotation \u2013 @Parcelize \u2013 on the desired class. Better still, if you have a nested structure of objects Kotlin will automatically serialize the whole tree! Since serializing data is cheap and easy, we can utilize this feature to create a better and more consistent user experience. For example, when transferring data from a list screen to a detailed view, it would be nice to show title and description right away while the rest of the data is being fetched. THE CONS OF USING KOTLIN OVER JAVA Using Kotlin means you have another dependency to take care of. By that we mean, there are at least three things to keep in sync, Kotlin language version, Kotlin plugin version for Android studio and Kotlin Gradle plugin version.Kotlin introduces some cool ideas, like coroutines. But these are experimental and as a result, you may experience an occasional bug.As you can see, there are significant reasons to use Kotlin. Although you\u2019ll need to get set up to integrate Kotlin, it\u2019s worth your time! If you\u2019re interested in learning more, or you\u2019d like to see a more in-depth answer to this question you can read Abdu\u2019s full article here. ",
            "date": "Answered August 27, 2020",
            "views": "16",
            "upvotes": " View 6 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Keldon Alleyne",
                    "user_href": "/profile/Keldon-Alleyne-1"
                },
                {
                    "user_id": "Sifiso Dhlamini",
                    "user_href": "/profile/Sifiso-Dhlamini-4"
                },
                {
                    "user_id": "Sammy Barasa",
                    "user_href": "/profile/Sammy-Barasa"
                },
                {
                    "user_id": "Ru Ky",
                    "user_href": "/profile/Ru-Ky"
                },
                {
                    "user_id": "Rachel Gair",
                    "user_href": "/profile/Rachel-Gair-2"
                },
                {
                    "user_id": "Hiep Le",
                    "user_href": "/profile/Hiep-Le-70"
                }
            ]
        },
        {
            "author_info": {
                "name": "Harikrishna Kundariya",
                "href": "/profile/Harikrishna-Kundariya-2"
            },
            "answer_text": " Kotlin Programming Language with its simplicity and compactness has confused the new aspirants as to which way to choose and where is the future lies? Not only the programmers or developers are confused, but also, it is big corporations too who are doubtful as to which way to choose. No doubt, to date, Java is the most acceptable and recognized programming language with millions of developers making a strong and vibrant community. Here, we will compare both programming languages Java and Kotlin. We will make a thoughtful comparison of both languages in terms of applicability, popularity, complexity in code, what programmers and developers think about both languages, user graphic interface and a lot of other things with a conclusion on \u201cwhere is the future; Java or Kotlin\u201d. 1. About Java Programming Language Did You Know, Java was primarily developed for Digital Cable Television and small embedded systems in electronic appliances like Set-top Box? BUT, the technology was too advanced for that time. Later, the same language was adopted by the Internet used for developing eye-catching web as well as mobile based applications. Initially, the name of Java was \u201cGreentalk\u201d having file extension .gt. This language was renamed as \u201cOak\u201d later as the Oak tree was a symbol of strength and its omnipresence in the countries like USA, France, and Romania. It was the year of 1995, Java got its present name \u201cJAVA\u201d after Indonesian Java, which is still in practice till date. 2. The popularity of Java worldwide Talking in terms of Popularity When technology is changing with lightning speed, the tech community recently celebrated the 20th Anniversary of Java.Java is one of the most popular and widely adopted Programming Languages. It is used by 9 million developers on 7 billion devices worldwide.According to http://plumber.io/blog, talking in terms of the Job market, analytics of Indeed and Monster Jobs - Job Search, Career Advice & Hiring Resources shows that ~18% of Monster Jobs - Job Search, Career Advice & Hiring Resources applicants can program in Java and ~16% of open engineering/programming positions scanned by Job Search | Indeed are looking for Java talent.Tiobe, a software quality company which publishes \u201cTIOBE Programming Community Index\u201d which is used as an indicator of programming languages popularity has given the title of \u201cMost Popular Programming Language in the world\u201d to JAVA Programming Language. 3. Pros and Cons of Java Pros Simple  Java is much less complicated than C++ as a result of Java uses automatic memory allocation and garbage collection.Object Oriented  Ability to form Standard programs and reusable codes.Platform independent  Ability to work on flexible systemsDistributed  It was developed for distributed computing with networking capability.Safe and secure  It is one of the safest and secure languages.Cons Performance  Slow performance is a main headache with Java.Graphics User Interface  The default graphic user interface feel of applications developed using Java is completely different from other native languages.Complex Code  Long, complicated sentences that form Code is less readable and scannable. As compared to rivals like Python, Java code is very complex and hard to understand.\u201cEvery once in a while, a new technology, an old problem, and a big idea turn into an innovation\u201d \u2013 Dean Kamen 4. About Kotlin Programming Language On July 2011, KOTLIN a new Programming Language for Android Development, named after Kotlin Islands, St. Pittsburgh, Russia having the extension \u2018.kt\u2019 or \u2018.kts\u2019 was born. It is a statically-typed programming language based on Java Virtual Machine. JetBrains, the father of Kotlin said that most of the languages did not have the features they were looking for, with the exception of Scala. However, the slow compile time of Scala as an obvious deficiency lead to developing Kotlin. One of the stated goals of Kotlin is to compile as quickly as Java. According to Development lead Andrey Breslay, \u201cKotlin is designed to be an industrial \u2013 strength object-oriented language and a better language than Java, but still be fully interoperable with Java code, allowing companies to make a gradual migration from Java to Kotlin\u201d. 5. Popularity of Kotlin Kotlin, due to its simple, safe and being 100% Java Compatible, is getting popular day by day. On 17th May 2017, Google announced that it will officially support Kotlin on Android as a \u201cfirst \u2013 class\u201d language. Though it was developed way back in the year 2011, the interest for Kotlin peaked following the announcement about its official support as first-class Android development about its official support as first-class Android development language at Google I/O 2017 which can be better understood by the graph as follows  Image Source Following the big announcement, the language for the first time, entered into the top 50 languages in June 2017, according to TIOBE Index, over 30 positions up since May 2017. It is the big brother Google whose support is helping Kotlin to gain adoption. As per the official website of the language, some of the leading technology companies like Uber, Pinterest, Evernote, Atlassian, and Pivotal are actively using Kotlin. 6. Pro and Cons of Kotlin Pros Can Increase the Team\u2019s Productivity  Unlike to Java, Kotlin eliminates the cumbersomeness. It is straightforward, compact and efficient with a concise and intuitive syntax. It takes less time to write and deploy new code. For example, when the \u201cApp Lock\u201d was re-written from Java to Kotlin, the number of lines of codes were reduced by 30%.Compatible with existing code  Kotlin is totally compatible with existing languages like Java. Moreover, this makes it possible to gradually migrate to Kotlin or to successfully use both languages within the same project.Lesser Bugs  Clear codes and Compactness of the language makes it tough for bugs to not to get detected easily.Reliable  Kotlin is not a new language, it is here with us since 2011 and during this time, it has been matured enough ultimately making it reliable.Cons Way different from Java: Kotlin still differs from Java in many aspects. It needs time, resources and training for an aspiring Kotlin developer.Slow Compilation Speed: If to trust the reports of some of the developers, Kotlin has slower Compilation Speed forming its one of the main drawbacks. Though in some cases, Kotlin beats Java (in terms of speed) but sometimes it is much slower than Java.Smaller Developer Community: Though Kotlin is getting the attention of developers with great speed, it still lacks \u201ca good number of developer community\u201d.Continue Reading\u2026 ",
            "date": "Answered January 8, 2019",
            "views": "223",
            "upvotes": " View 1 Upvoter",
            "upvoters": [
                {
                    "user_id": "Saksham Sneh",
                    "user_href": "/profile/Saksham-Sneh"
                }
            ]
        }
    ]
}