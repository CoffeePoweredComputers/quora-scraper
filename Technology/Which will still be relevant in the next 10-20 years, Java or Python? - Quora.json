{
    "title": "Which will still be relevant in the next 10-20 years, Java or Python? - Quora",
    "tags": [
        "Python Vs. Java",
        "Relevance",
        "Future Scenarios",
        "Technology Trends",
        "Python (programming language)",
        "Java (programming language)",
        "Learning to Program",
        "Programming Languages",
        "Technology"
    ],
    "response": [
        {
            "author_info": {
                "name": "Richard Kenneth Eng",
                "href": "/profile/Richard-Kenneth-Eng"
            },
            "answer_text": "It\u2019s anybody\u2019s guess. Pure speculation. Forecasting 10\u201320 years into the future is a fool\u2019s game. In one decade, a whole lot of shit can happen. In one decade, FORTRAN and COBOL fell from the top into relative obscurity, and C++ and Java took over. In one decade, Objective-C rose from obscurity to become the main language for iPhone development. And Swift only came out 5 years ago. In one decade, JavaScript rose from being a laughing stock to the #1 language for front-end web development. In one decade, Python rose from a garden-variety scripting language to the #1 language for data science and machine learning. In one decade, C# went from birth to a Top 10 language, thanks to Microsoft. A decade ago, Go and TypeScript didn\u2019t exist. Today, they\u2019re on everybody\u2019s mind. So who knows what will happen in the next decade. Or two. Nevertheless, I\u2019ll offer my opinion\u2026 In 10\u201320 years, Java and Python will remain Top 10 languages. They may not necessarily stay on top (where they are now). There will still be lots of jobs for them. They will still be widely used. What languages might be on top? I\u2019m very hopeful that Smalltalk will make a major comeback. After all, in the 1990s, Smalltalk was a major language that was adopted by IBM. In 1995, Smalltalk had the second largest OO market share in the world.  See Richard Kenneth Eng's answer to What was the first programming language you learned, and what was the last one, in order of time? Another language that may make it to the top is Go. It offers most of the benefits of Python without any of Python\u2019s drawbacks (like the GIL, like molasses-slow execution speed, like crippled lambdas, like using indentation as syntax, like lack of tail call optimization, like peculiar variable scoping rules). Go has great potential for data science and machine learning. See Golang Big Data | Golang Data Science. See Amazon.com: Go Machine Learning Projects, by Xuanyi Chew. See Machine Learning With Go, by Daniel Whitenack. See avelino/awesome-go. I see Go as a great challenger to Java. (Not Kotlin nor Scala which have very long odds.) ",
            "date": "Answered September 30, 2019",
            "views": "432",
            "upvotes": " View 2 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Bamidele Rodgers",
                    "user_href": "/profile/Bamidele-Rodgers"
                },
                {
                    "user_id": "Carlos Miguel Far\u00edas",
                    "user_href": "/profile/Carlos-Miguel-Far\u00edas"
                }
            ]
        },
        {
            "author_info": {
                "name": "Federico Navarrete",
                "href": "/profile/Federico-Navarrete-1"
            },
            "answer_text": "This is a very hard question to answer. Personally, I have a feeling that in the next 10-20 years, more people will be using Low-Code Platforms like Automation Anywhere, Wix.com, OutSystems, Azure ML Studio, Google Cloud AutoML, etc. They are going to become more accessible and prevalent and only in very specific circumstances you will rely on highly specialized people (let's say a very unique app or novel service). I'm quite convinced that only if you're working in a medium/large company that can afford these specialized services, they will be required and paid. In other cases like StartUps/Small companies, they would rely mostly LCPs since they are \u201ccheaper\u201d and \u201cfaster\u201d to maintain. Think it like this, if you use OutSystems, you can build apps for Android and iOS just by dragging and dropping and if there is Android 30 or iOS 35, you only re-run the service and re-upload the apps without extra-effort and payments because there was a crazy change in certain APIs, they as a company take care of that. You might say, but those apps are less efficient or bigger, there is a price to pay and small companies would rather afford it than paying more. Many people might disagree with that I have said and tell you their points of view too and they could be valid, but I'd check LCPs too more than just coding and see how your code written in Java or Python can be integrated in those tools. ",
            "date": "Answered September 30, 2019",
            "views": "169",
            "upvotes": " View 2 Upvoters",
            "upvoters": [
                {
                    "user_id": "Edgar Regalado",
                    "user_href": "/profile/Edgar-Regalado"
                },
                {
                    "user_id": "Bamidele Rodgers",
                    "user_href": "/profile/Bamidele-Rodgers"
                }
            ]
        }
    ]
}