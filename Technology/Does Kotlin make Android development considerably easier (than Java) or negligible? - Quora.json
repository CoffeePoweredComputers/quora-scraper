{
    "title": "Does Kotlin make Android development considerably easier (than Java) or negligible? - Quora",
    "tags": [
        "Android Application Developers",
        "Software Developers"
    ],
    "response": [
        {
            "author_info": {
                "name": "Matthew Aaron Feinberg",
                "href": "/profile/Matthew-Aaron-Feinberg"
            },
            "answer_text": "It really depends on what kind of application you are developing. We used Kotlin almost exclusively when developing Alight Motion, and it made development significantly easier. My estimation is that we saved roughly one programmer-year of effort on development by using Kotlin. People will tell you that there\u2019s no difference, as both languages target the JVM and produce equivalent bytecode. For some apps, that may be true, but for many kinds of sophisticated apps, judicious use of Kotlin can make a real difference. I\u2019ll touch on a few points where Kotlin made a big difference for us in the development of Alight Motion (there are many others; this is just a sampling). Immutable data (and lenses) The user\u2019s project data is stored in an immutable data structure that is regenerated with every change. This is surprisingly lightweight because most of the nodes can be re-used (due to immutability), and this approach gives us big gains in several critical areas:\u2022 Project updates (while a user is dragging a layer around, for example) can be sent to the rendering engine as immutable snapshots without the need for a deep copy. This eliminates the need to worry about concurrency issues and eliminates and entire category of possible bugs, while also vastly simplifying the code.\u2022 Undo/Redo can have a nearly unlimited number of levels, with hardly any performance penalty.\u2022 The architecture paves the way for collaborative realtime animation editing ala Google Docs by being able to generate and apply differences between one version of the project structure and another.Sure, you can do immutable lists and maps in Java by convention, but there\u2019s always a risk they\u2019ll be modified elsewhere. In Kotlin, it\u2019s enforced by the compiler. Another huge benefit Kotlin brings to the table is lenses. Although they are not built-in, Kotlin\u2019s powerful type system, powerful introspection support, and operating overloading allows for a fairly concise and type-safe way to implement lenses, allowing common code (for example, for editing keyframes on a property) to be applied to any property, even one buried deep within the project structure, even though the path to that property passes through several nested immutable data structures.While lenses are a little hard to wrap your brain around if you\u2019re not from a functional programming background, the benefits in code-reuse when working with immutable data are huge.Extension FunctionsThis is a big one on Android. As any experienced Android programmer is aware, there are different ways to get a functionality depending on whether you are writing code in a Fragment, or in an Activity. Case in point, accessing the context is different (\u201cthis\u201d vs. \u201cgetActivity()\u201d). This means that code that is functionally identical has to bet written differently depending on where you\u2019re writing it.Google tried to remedy this by adding getContext() methods to both fragments and activities, but the problem is that these are not available on older Android versions.Enter extension functions (and properties). By defining, say, a \u201c.context\u201d extension property on both Activities and Fragments (which calls through to getContext() if available on the current Android version, or getActivity() if not) you can now write code consistently in both places.This extends to many other areas too, working around legacy cruft left behind from older Android APIs (the cruft is still there, but at least it\u2019s hidden from your code). This is something Google is pushing directly via the Kotlin extensions that are part of Project Jetpack.More Concise CodeLet\u2019s face it: Java is needlessly verbose. This used to be a good thing. Developers were forced to explicitly specify things, and this made it easier to reason about the code, especially for new members on a team who weren\u2019t already familiar with it.But times change, and IDEs provide a lot of this information even if it\u2019s not explicitly specified in the code. For example, you can easily put the cursor in a variable name and hit F1 to find out the type of the variable.Nowadays, as apps become more and more sophisticated, and the verbosity provided by Java more and more redundant, it provides more of a hinderance than a help: By burying core functionality in amongst needless extra syntax, it makes it hard to understand a program at a glance (without a lot of extra scrolling) and makes it harder to reason about code.Kotlin, on the other hand, pares away a lot of the verbosity of Java, without losing any of the information provided. Type inference combined with IDE tools makes for a much more seamless experience. This, also, saved a lot of time.Data ClassesKotlin data classes are functionally equivalent to Java, but an order of magnitude more concise and maintainable. No need to look through pages of automatically generated comparator code, wondering if it\u2019s stock or customized; Kotlin distills away all of the boilerplate.This results in significant benefits when working with large, complex, nested data structures like Alight Motion projects, and is especially nice when dealing with immutable data (the auto-generated copy method on Kotlin data classes is a thing of beauty!)This is only a tip of the iceberg, but should give you an idea of how Kotlin can help. For simple apps, there\u2019s probably not a big difference. As with any tool, of course Kotlin languages features can be abused, but if used properly by experienced developers, Kotlin can give some significant material gains in development time and cost. That said, if you\u2019re a manager who is not actively involved in development, you don\u2019t want to be forcing Kotlin on your dev team. The best language to use might be the one they are already familiar with\u2014it depends on the project, and the schedule. It\u2019s definitely doesn\u2019t hurt to learn Kotlin and give it strong consideration when choosing the language you will use to build your app. ",
            "date": "Answered October 21, 2018",
            "views": "400",
            "upvotes": " View 1 Upvoter",
            "upvoters": [
                {
                    "user_id": "Ron Si.",
                    "user_href": "/profile/Ron-Si-2"
                }
            ]
        }
    ]
}