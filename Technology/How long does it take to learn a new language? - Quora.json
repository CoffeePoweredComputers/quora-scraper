{
    "title": "How long does it take to learn a new language? - Quora",
    "tags": [
        "Learning Specific Languages",
        "Specific Languages",
        "Learning Languages",
        "Learning New Things"
    ],
    "response": [
        {
            "author_info": {
                "name": "Amit Bakale",
                "href": "/profile/Amit-Bakale"
            },
            "answer_text": "How long does it really take to learn a second language? The short answer is, it depends. Most language teachers will tell you that what you put in, is what you get out of language studies. Companies that sell language learning products or software may claim that their method or materials will guarantee fluency in a certain period of time. Usually, that time frame just happens to correspond to their particular program. Language experts tend to be skeptical of claims that a certain method can guarantee fluency in a short period of time \u2013 and with good reason. The reality is that language acquisition is a complex process that involves communication, grammar, structure, comprehension and language production along with reading, writing, speaking and listening, just to name a few of the simpler aspects of language learning. John Archibald and a team of researchers at the University of Calgary conducted a study in 2007 that examined a number of questions relating to second language learning. The found that students who learn other subjects in a foreign language are likely to gain fluency and competence faster. The method, known as content-based language teaching (CBLT), involves teaching subject matter content such as math, geography and other subjects in a foreign language. \u201cStudents in time-intensive content-based language teaching (CBLT) programs, such as French immersion, are typically able to master complex content material effectively, despite less than native-like proficiency in the language of instruction. In programs where students have limited second-language proficiency and less time is devoted to second-language learning, the concrete and highly-contextualized content.\u201d (Archibald et al, 2007) Their work also found that the age at which a person begins to learn a language matters. Children who grow up learning more than one language at home essentially have two mother tongues (Archibald et al., 2007 and Swain, 1972). For those that don\u2019t have the privilege of learning more than one language from a young age at home, there are other factors. The age of the learner Language learning follows different patterns depending on when you start. Citing a study conducted by Birdsong (1999), Archibald and his team found that: \u201cIf second-language acquisition begins at age 5, it follows a different pattern than when second-language acquisition begins at age 25 or at age 15.\u201d (Archibald et al., 2007, p. 3). Notice that the researchers are careful not to judge if one\u2019s ability to learn a language becomes better or worse at a certain age. It simply follows a different mental and cognitive pattern. Immersion It also makes a difference if you\u2019re learning a minority language or a majority language (Archibald et al, 2007; Cummins and Swain, 1986). For example, if you live in an English-speaking country and you are learning Italian, you are learning a minority language. But if you are an Italian living in England who is learning English, you are learning the language spoken by the majority. If you\u2019re submersed in a language, the learning process is different because you\u2019re being exposed to the language more for more hours per day, on a consistent basis. Language learning in school A key finding of the research by the University of Calgary team found that students who take foreign language classes at school are unless to receive sufficient exposure to the language to gain deep fluency: \u201cLearning a second language for 95 hours per year for six years willnot lead to functional bilingualism and fluency in the second language. Expectations must be realistic.\u201d (Archibald et al., 2007, p. 3) Language learning in terms of hours \u2013 Apply the \u201c10,000-hour rule\u201d Though the researchers don\u2019t say how they arrived at the number of 95 hours per year, we can figure it out. Let\u2019s look: 4 hours per week of language classes x 12 weeks per semester x 2 semesters per school year = 96 hours per year. If a student begins learning a language in grade six and continues on through to high school completion in grade 12, that constitutes 6 years of language learning. 96 hours per year for 6 years = 576 hours of language instruction In his book, Outliers, author Malcom Gladwell highlights a study orirignally published in the Harvard Business review by Ericsson et al. The general premise has become known as the \u201c10,000 hours to become an expert rule\u201d. In the book Gladwell explains the research behind the notion that true expertise is achieved after an individual has invested 10,000 hours in learning or practicing a skill. This may be a sport, a musical instrument or the study of something. There are many ways to define \u201cfluency\u201d. If, for the sake of argument, we consider \ufb02uency to be the same as being an \u201cexpert\u201d in speaking a language, then a learner may well invest 10,000 hours in their language studies to attain \ufb02uency. People will shake their heads when they hear that. No one wants to believe it really requires that much work. Let\u2019s look at some different scenarios: Scenario #1: One 3-hour adult education course per week x 8 weeks = 24 hours Scenario #2: One year of language learning in school = 4 hours per week x 12 weeks x 2 semesters = 96 hours Scenario #3: 1 year of consistent, dedicated self-study (or homework) at 1 hour per day = 365 hours Scenario #4: One year of total immersion in the new language (Assuming that in a 24-hour day, we allow 8 hours for sleeping per day) = 16 hours per day x 365 days = 5840 hours If we use Gladwell\u2019s of 10,000-hour rule,  here\u2019s how long it would take to achieve \u201cexpert ability\u201d in a foreign language: Scenario #1 \u2013 Adult education classes \u2013 416 courses of 24 hours per course. If you did 2 courses per year, you\u2019d need 208 years to become fluent. Scenario #2 \u2013 Foreign language studies at school \u2013 96 hours of classes per year = 104 years to achieve fluency. Scenario #3 \u2013 Dedicated self-study \u2013 An hour a day, every single day of the year = 365 hours per year = 27 years Scenario #4 \u2013 Total immersion \u2013 Approximately 2 years Let\u2019s be clear. This is one very simplified way of looking at language learning. I openly admit that this way of looking at the question may be a bit reductionist. I said at the beginning of this post that language learning is a complex activity. This way of looking at how long it takes to become fluent doesn\u2019t take into account individual differences or abilities, and nor does it address the effectiveness of different language teaching methods. It is simply one way to answer the question, \u201cHow long does it take to learn a new language?\u201d Some argue that immersion is the \u201cbest\u201d way to learn a language. Others argue that there is no one \u201cbest\u201d way. It may not be about the methods used, but simply the amount of hours spent learning. Learning can be done in formal, non-formal and informal contexts. Language learning doesn\u2019t always take place in the classroom. Trained teachers can offer strategies and guidance that the self-directed learner may not have. The bottom line is that mastering a foreign language takes time, dedication and hard work, regardless of whether it is done in a classroom or in an immersion setting. However, the benefits of learning how to speak a second language are certainly worth the effort. The challenges of learning another language are immense. Yet millions have achieved some degree of \ufb02uency in at least one other language. Those who achieve true \ufb02uency do so because they put in dedicated, consistent effort over a long period of time. Claiming otherwise is tantamount to fraud. Instead of asking \u201cHow long does it take to become fluent in another language?\u201d perhaps a better question is \u201cHow do I get my 10,000 hours of study and practice to become fluent in a new language?\u201d The answer for most people, in practical terms of every day life, may well like in some combination of formal or non-formal classes, self-study, practice with others in informal contexts and immersion experiences through travel or living abroad. ",
            "date": "Answered April 26, 2016",
            "views": "42",
            "upvotes": " View 16 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Laura Odom",
                    "user_href": "/profile/Laura-Odom-12"
                },
                {
                    "user_id": "Mithun Nair",
                    "user_href": "/profile/Mithun-Nair-26"
                },
                {
                    "user_id": "Seth Escariot",
                    "user_href": "/profile/Seth-Escariot"
                },
                {
                    "user_id": "Prakash Negi",
                    "user_href": "/profile/Prakash-Negi-65"
                },
                {
                    "user_id": "Steven B\u00e1ez Fern\u00e1ndez",
                    "user_href": "/profile/Steven-B\u00e1ez-Fern\u00e1ndez"
                },
                {
                    "user_id": "Debbie Howard",
                    "user_href": "/profile/Debbie-Howard-33"
                },
                {
                    "user_id": "Max Menzel",
                    "user_href": "/profile/Max-Menzel"
                },
                {
                    "user_id": "Vakva",
                    "user_href": "/profile/Vakva"
                },
                {
                    "user_id": "Hayyat Adam",
                    "user_href": "/profile/Hayyat-Adam"
                },
                {
                    "user_id": "M. Gevirtz",
                    "user_href": "/profile/M-Gevirtz"
                }
            ]
        },
        {
            "author_info": {
                "name": "Fabio Akita",
                "href": "/profile/Fabio-Akita"
            },
            "answer_text": "Depends on what kind of language. For example, the (once hailed, now hated) CoffeeScript, which came years before the now hailed ES6 with most of its current features, was written by a rubyist, in Ruby, Jeremy Ashkenas. Legend says (or at least as I remember it) that he didn\u2019t have a hard background in computer science or specifically language design and compilers. He studied this tiny book \u201cHow to Create Your Own Programming Language\u201d and, as Wikipedia puts it: On December 13, 2009, Jeremy Ashkenas made the first Git commit of CoffeeScript with the comment: \"initial commit of the mystery language.\" The compiler was written in Ruby. On December 24, he made the first tagged and documented release, 0.1.0. On February 21, 2010, he committed version 0.5, which replaced the Ruby compiler with a self-hosting version in pure CoffeeScript. By that time the project had attracted several other contributors on GitHub, and was receiving over 300 page hits per day. So, roughly, in under 6 months, he put together version 1.0 of CoffeeScript and rest, as they says, is history. In classic computer science disciplines, one would have to go through the legendary Dragon book, the Compilers - Principles, Techniques & Tools. Then you will learn all the boring and gory details of lexical analysis, syntax analysis, BNF, tools like lex, flex, yacc, bison and others. If you have the inclination, the time, and the dedication, I really recommend you study this. There are several practical cases that requires compiler-level thinking. One example, again in the Ruby world, was the Ruby on Rails router component. In that framework we use what\u2019s called a Domain Specific Language (a DSL, another option to write your own language). It\u2019s complicated and you can make your way around it with a shit-ton of \u201cifs\u201d and \u201ccase\u201d statements (which is what a compiler actually is, in beginner terms). But it quickly become cumbersome, complicated, error-prone, and super slow. \u201cCompilers\u201d have a set of patterns and tools that automate this sort of thing and this is what the Rails routers ended up being reimplemented with: with a proper parser looking like yacc (racc) and a proper grammar. Who would\u2019ve thought that a web framework would require a compiler-level understanding? Do not underestimate the theme. It\u2019s super easy to make a simple - and slow - language. First, which kind of language design? What kinds of language paradigms? All procedural? All functional? All imperative? All logic? All object-oriented? All pattern-oriented? And yes, there is a shit-ton of paradigms, not just OOP or Functional or Procedural. Then if you\u2019re mixing, to which extent? How to balance it out? Then you have to learn about Type Theory and this is another discipline in it\u2019s own and can lead you to obscure Haskell places all the way to crappy \u201cundefined\u201ds all around. Then you have to think about how the underlying hardware actually works. Processors, registers, caches, data transfer, bottlenecks, etc. The most elegant design can be a headache to compile down to fast native binary. Then you have different kinds of binaries for different kinds of processor architectures. From a complicated Intel CPU, to the ARM architecture found on most smartphones or even totally different architectures such as GPUs, for which you can find APIs such as CUDA. Or, you can abstract away the hardware completely and rely on an existing virtual machine such as the JVM or CLR or BEAM (Erlang VM) and build languages such as JRuby, Scala, Clojure that leverages the Java JVM or languages such as F#, C#, VB .NET that leverages Microsoft\u2019s own CRL or .NET Core. Or Elixir which generated Erlang BEAM compatible code. Or, you may still want to compile down to native binary without an intermediary VM - do the whole AOT process - ahead-of-time compiling - instead of JIT\u2019ing - just-in-time compiling. Then you can borrow from Apple\u2019s LLVM the same way they can compile both Objective-C and Swift down to both MacOS/Intel or iOS/ARM binaries. This is what languages such as Rust and Crystal or Clang (the one that wants to replace the classic GCC C) do. LLVM is the best framework to study right now from a practical perspective. Designing a language is not only translating the syntax down to machine code. You have to worry about proper machine optimization. Elegant, human-readable code, is often awful for machine execution if translated directly into machine code. Machines don\u2019t care about proper programming abstractions and patterns, they like highly procedural, highly linear code. So the compiler must be smart enough to find pieces of code that it can put together, replace or cut altogether from the final binary. Otherwise it will be awfully slow. This is what interpreter such as V8 is doing to make the historically shitty Javascript run fast on browsers: employing a shit-ton of computer-science based compiler theory behind it. Speaking of which there is now the Web Assembly initiative, to formalize what we already have with ASM.js which is a subset of Javascript - a saner subset - that a compiler can actually optimize to fast machine code. Going back to the beginning. So, how long does it take to develop a new language? It depends. You can write a simple DSL in a couple of hours. A simple language such as CoffeeScript - that compiles down to another language, Javascript, so being a transpiler instead of a full blown compiler - in a matter of weeks. You can write a language such as Clojure leveraging the JVM in a couple of months. You can write a language such as Rust or Crystal leveraging all the packaged computer-science in LLVM in some more months. And in any case you will spend the next couple of years optimizing the hell out of it because all your initial assumptions about the language will be proven different once you put version 1.0 out there. Expect a successful language to take somewhere in the ballpark of 4 to 5 years to really pick up steam, and your continuous effort in optimizing it all the way. That\u2019s how long it takes. ",
            "date": "Answered May 10, 2017",
            "views": "34",
            "upvotes": " View 4 Upvoters",
            "upvoters": [
                {
                    "user_id": "Joel Taylor",
                    "user_href": "/profile/Joel-Taylor-20"
                },
                {
                    "user_id": "Matthew Levi",
                    "user_href": "/profile/Matthew-Levi-1"
                },
                {
                    "user_id": "Randson Oliveira",
                    "user_href": "/profile/Randson-Oliveira"
                },
                {
                    "user_id": "Douglas Lise",
                    "user_href": "/profile/Douglas-Lise"
                }
            ]
        }
    ]
}