{
    "title": "What is infrastructure as a code? - Quora",
    "tags": [
        "Infrastructure As Code",
        "DevOps",
        "Infrastructure"
    ],
    "response": [
        {
            "author_info": {
                "name": "Abhinav Jain",
                "href": "/profile/Abhinav-Jain-6"
            },
            "answer_text": "Infrastructure as code (IaC) is an approach to software development that treats physical compute, storage and network fabric resources as web services and allows apps to run where they are best suited, based on cost and performance data, instead of geographical location. Essentially, IaC negates the need for software engineers to be concerned with the physical location of infrastructure components. Instead, when a software application requests infrastructure to run, available services are located through an automated discovery process and resources are allocated on demand. When an infrastructure resource is no longer required, it is re-appropriated so it can be allocated to another application that needs it.  Examples of IaC tools include AWS CloudFormation, Red Hat Ansible, Chef, Puppet, SaltStack and HashiCorp Terraform. Each of these tools has its own way of defining infrastructure, and each allows an administrator to define a service without having to configure a physical infrastructure. These tools are also able to roll back changes to the code, should an unexpected problem arise when new code is released.  Some IaC tools rely on a domain-specific language (DSL), while others use a standard template format, such as YAML and JSON. When selecting an IaC tool, organizations should consider the target deployment. For example, AWS CloudFormation is designed to provision and manage infrastructure on AWS and works well with other AWS offerings. Alternatively, Chef works with on-premises servers and multiple cloud provider IaC offerings.  IaC can be managed through the same version control and automated testing procedures that developers use to maintain quality assurance (QA) in their continuous integration and continuous delivery (CI/CD) pipelines. As of this writing, there are no agreed-upon standards for implementing IaC and the concept is known by several other names, including composable infrastructure, programmable infrastructure and software-defined infrastructure.  Infrastructure as code doesn't mean you create full software applications from scratch -- tools are there to do the heavy lifting -- but admins must understand code structure, syntax and design. ",
            "date": "Answered January 10, 2019",
            "views": "823",
            "upvotes": " View 2 Upvoters ",
            "upvoters": [
                {
                    "user_id": "Salman Choudhary",
                    "user_href": "/profile/Salman-Choudhary-9"
                },
                {
                    "user_id": "WorkKey",
                    "user_href": "/profile/WorkKey"
                }
            ]
        },
        {
            "author_info": {
                "name": "Malika Pathak",
                "href": "/profile/Malika-Pathak-2"
            },
            "answer_text": "Infrastructure as Code (IaC) is the foundation the board (systems, virtual machines, load balancers, and association geography) in an illustrative model, utilizing a similar form control that the DevOps group utilizes for code. source. Like the rule that a similar source code produces a similar twofold, an IaC model creates a similar situation each time it is applied. IaC is a key DevOps practice and is utilized related to consistent conveyance. Infrastructure as Code has evolved to address the issue of environmental drift in the launch pipeline. Without IaC, teams must maintain the configuration of individual deployment environments. Over time, each environment turns into a snowflake, that is, a unique configuration that cannot be reproduced automatically. Inconsistency between environments causes problems during deployments. With snowflakes, managing, and maintaining your infrastructure involves manual processes that are difficult to follow and have contributed to errors. Idempotency is an infrastructure principle as code. Idempotency is the property that a deployment command always sets the target environment to the same configuration, regardless of the initial state of the environment. Idempotency is achieved by automatically setting an existing target or by removing the existing target and recreating a new environment. As a result, with IaC, teams make changes to the environment description and version of the configuration template, which is typically found in well-documented code formats like JSON. The release pipeline runs the template to configure the target environments. If the team needs to make changes, change the source, not the destination. ",
            "date": "Answered August 17, 2020",
            "views": "60",
            "upvotes": "0"
        }
    ]
}