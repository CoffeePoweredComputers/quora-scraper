{
    "title": "How to implement a Fibonacci sequence in the simplest way in Python - Quora",
    "tags": [
        "Fibonacci Sequence",
        "Fibonacci Numbers",
        "Python Libraries",
        "Sums and Series (mathematics)",
        "Algorithms",
        "Python (programming language)",
        "Learning to Program",
        "Programming Languages"
    ],
    "response": [
        {
            "author_info": {
                "name": "James Wang",
                "href": "/profile/James-Wang-204"
            },
            "answer_text": "import sympy as sp\u00a0def fib_large(n): # For large n\u00a0\treturn (sp.Matrix([[1, 1], [1, 0]])**n)[0, 1]\u00a0def fib_small(n): # Simpler, for small n\u00a0\tphi = (1 + sp.sqrt(5))/2\u00a0\tpsi = 1 - phi\u00a0\treturn sp.simplify((phi**n - psi**n)/sp.sqrt(5))\u00a0def fib_float(n):\u00a0\tphi = (1 + 5**0.5)/2\u00a0\tpsi = 1- phi\u00a0\treturn int(round((phi**n - psi**n)/(5**0.5)))\u00a0We\u2019re using SymPy here to avoid the issues with integer overflows, floating-point roundoff, etc. but the algorithms should work in your favorite numerical computation library (or just vanilla Python). The first relies on the fact that the Fibonacci sequence is generated by a linear recurrence relation with constant coefficients: [math]F_{n} = F_{n-1} + F_{n-2}[/math] - such relations can be expressed as a composition of linear maps (equivalently, the product of matrices), which we can compute with exponentiation-by-squaring to achieve a sublinear (wrt [math]n[/math]) time complexity. In other words, it\u2019s fast. Really fast (though not in SymPy). The second relies on (the incorrectly-attributed) Binet\u2019s formula, which can be derived by diagonalizing the matrix in the first algorithm. At first glance, it seems to compute the nth Fibonacci number in constant time, but this is deceiving, since the floating-point exponentiation is really hard. The third is a piece of garbage you\u2019d write in an interview because it works in vanilla Python and is correct for small inputs. Bonus points if you talk up the time complexity and use big words like \u201ceigenvalue\u201d to impress your interviewer (that\u2019s how I got my internship this summer!) ",
            "date": "Answered August 18, 2019",
            "views": "566",
            "upvotes": " View 1 Upvoter",
            "upvoters": [
                {
                    "user_id": "Paul McQuesten",
                    "user_href": "/profile/Paul-McQuesten-1"
                }
            ]
        },
        {
            "author_info": {
                "name": "Dave Buchfuhrer",
                "href": "/profile/Dave-Buchfuhrer"
            },
            "answer_text": "The simplest way I can think of is to write a generator that outputs the whole sequence. def fib():\u00a0    a, b = 1, 1\u00a0    while True:\u00a0        yield a\u00a0        a, b = b, a + b\u00a0This follows pretty directly from the definition of the sequence, and you only need to store two values at a time. It doesn\u2019t use any external libraries and you don\u2019t have to think much to write it correctly. ",
            "date": "Answered August 20, 2019",
            "views": "170",
            "upvotes": " View 2 Upvoters",
            "upvoters": [
                {
                    "user_id": "Lu\u00eds Sequeira",
                    "user_href": "/profile/Lu\u00eds-Sequeira-2"
                },
                {
                    "user_id": "Suhas S",
                    "user_href": "/profile/Suhas-S-124"
                }
            ]
        },
        {
            "author_info": {
                "name": "David Lambert",
                "href": "/profile/David-Lambert-86"
            },
            "answer_text": "Just now I connected to Welcome to Python.org in order to read the most recent release notes. This program was posted as the first thing I saw. # Python 3: Fibonacci series up to n\u00a0>>> def fib(n):\u00a0>>>     a, b = 0, 1\u00a0>>>     while a < n:\u00a0>>>         print(a, end=' ')\u00a0>>>         a, b = b, a+b\u00a0>>>     print()\u00a0>>> fib(1000)\u00a0",
            "date": "Answered September 6, 2019",
            "views": "47",
            "upvotes": " Answer requested by Dex Jackson"
        }
    ]
}